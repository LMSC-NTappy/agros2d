// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "coupling_xml.h"

namespace XMLCoupling
{
  // coupling
  // 

  const coupling::general_type& coupling::
  general () const
  {
    return this->general_.get ();
  }

  coupling::general_type& coupling::
  general ()
  {
    return this->general_.get ();
  }

  void coupling::
  general (const general_type& x)
  {
    this->general_.set (x);
  }

  void coupling::
  general (::std::auto_ptr< general_type > x)
  {
    this->general_.set (x);
  }

  const coupling::constants_type& coupling::
  constants () const
  {
    return this->constants_.get ();
  }

  coupling::constants_type& coupling::
  constants ()
  {
    return this->constants_.get ();
  }

  void coupling::
  constants (const constants_type& x)
  {
    this->constants_.set (x);
  }

  void coupling::
  constants (::std::auto_ptr< constants_type > x)
  {
    this->constants_.set (x);
  }

  const coupling::volume_type& coupling::
  volume () const
  {
    return this->volume_.get ();
  }

  coupling::volume_type& coupling::
  volume ()
  {
    return this->volume_.get ();
  }

  void coupling::
  volume (const volume_type& x)
  {
    this->volume_.set (x);
  }

  void coupling::
  volume (::std::auto_ptr< volume_type > x)
  {
    this->volume_.set (x);
  }


  // general
  // 

  const general::description_type& general::
  description () const
  {
    return this->description_.get ();
  }

  general::description_type& general::
  description ()
  {
    return this->description_.get ();
  }

  void general::
  description (const description_type& x)
  {
    this->description_.set (x);
  }

  void general::
  description (::std::auto_ptr< description_type > x)
  {
    this->description_.set (x);
  }

  const general::modules_type& general::
  modules () const
  {
    return this->modules_.get ();
  }

  general::modules_type& general::
  modules ()
  {
    return this->modules_.get ();
  }

  void general::
  modules (const modules_type& x)
  {
    this->modules_.set (x);
  }

  void general::
  modules (::std::auto_ptr< modules_type > x)
  {
    this->modules_.set (x);
  }

  const general::id_type& general::
  id () const
  {
    return this->id_.get ();
  }

  general::id_type& general::
  id ()
  {
    return this->id_.get ();
  }

  void general::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void general::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }

  const general::name_type& general::
  name () const
  {
    return this->name_.get ();
  }

  general::name_type& general::
  name ()
  {
    return this->name_.get ();
  }

  void general::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void general::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }


  // constants
  // 

  const constants::constant_sequence& constants::
  constant () const
  {
    return this->constant_;
  }

  constants::constant_sequence& constants::
  constant ()
  {
    return this->constant_;
  }

  void constants::
  constant (const constant_sequence& s)
  {
    this->constant_ = s;
  }


  // constant
  // 

  const constant::id_type& constant::
  id () const
  {
    return this->id_.get ();
  }

  constant::id_type& constant::
  id ()
  {
    return this->id_.get ();
  }

  void constant::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void constant::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }

  const constant::value_type& constant::
  value () const
  {
    return this->value_.get ();
  }

  constant::value_type& constant::
  value ()
  {
    return this->value_.get ();
  }

  void constant::
  value (const value_type& x)
  {
    this->value_.set (x);
  }


  // modules
  // 

  const modules::source_type& modules::
  source () const
  {
    return this->source_.get ();
  }

  modules::source_type& modules::
  source ()
  {
    return this->source_.get ();
  }

  void modules::
  source (const source_type& x)
  {
    this->source_.set (x);
  }

  void modules::
  source (::std::auto_ptr< source_type > x)
  {
    this->source_.set (x);
  }

  const modules::target_type& modules::
  target () const
  {
    return this->target_.get ();
  }

  modules::target_type& modules::
  target ()
  {
    return this->target_.get ();
  }

  void modules::
  target (const target_type& x)
  {
    this->target_.set (x);
  }

  void modules::
  target (::std::auto_ptr< target_type > x)
  {
    this->target_.set (x);
  }


  // source
  // 

  const source::id_type& source::
  id () const
  {
    return this->id_.get ();
  }

  source::id_type& source::
  id ()
  {
    return this->id_.get ();
  }

  void source::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void source::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // target
  // 

  const target::id_type& target::
  id () const
  {
    return this->id_.get ();
  }

  target::id_type& target::
  id ()
  {
    return this->id_.get ();
  }

  void target::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void target::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // volume
  // 

  const volume::weakforms_volume_type& volume::
  weakforms_volume () const
  {
    return this->weakforms_volume_.get ();
  }

  volume::weakforms_volume_type& volume::
  weakforms_volume ()
  {
    return this->weakforms_volume_.get ();
  }

  void volume::
  weakforms_volume (const weakforms_volume_type& x)
  {
    this->weakforms_volume_.set (x);
  }

  void volume::
  weakforms_volume (::std::auto_ptr< weakforms_volume_type > x)
  {
    this->weakforms_volume_.set (x);
  }


  // weakforms_volume
  // 

  const weakforms_volume::weakform_volume_sequence& weakforms_volume::
  weakform_volume () const
  {
    return this->weakform_volume_;
  }

  weakforms_volume::weakform_volume_sequence& weakforms_volume::
  weakform_volume ()
  {
    return this->weakform_volume_;
  }

  void weakforms_volume::
  weakform_volume (const weakform_volume_sequence& s)
  {
    this->weakform_volume_ = s;
  }


  // weakform_surface
  // 

  const weakform_surface::matrix_form_sequence& weakform_surface::
  matrix_form () const
  {
    return this->matrix_form_;
  }

  weakform_surface::matrix_form_sequence& weakform_surface::
  matrix_form ()
  {
    return this->matrix_form_;
  }

  void weakform_surface::
  matrix_form (const matrix_form_sequence& s)
  {
    this->matrix_form_ = s;
  }

  const weakform_surface::vector_form_sequence& weakform_surface::
  vector_form () const
  {
    return this->vector_form_;
  }

  weakform_surface::vector_form_sequence& weakform_surface::
  vector_form ()
  {
    return this->vector_form_;
  }

  void weakform_surface::
  vector_form (const vector_form_sequence& s)
  {
    this->vector_form_ = s;
  }

  const weakform_surface::couplingtype_type& weakform_surface::
  couplingtype () const
  {
    return this->couplingtype_.get ();
  }

  weakform_surface::couplingtype_type& weakform_surface::
  couplingtype ()
  {
    return this->couplingtype_.get ();
  }

  void weakform_surface::
  couplingtype (const couplingtype_type& x)
  {
    this->couplingtype_.set (x);
  }

  void weakform_surface::
  couplingtype (::std::auto_ptr< couplingtype_type > x)
  {
    this->couplingtype_.set (x);
  }

  const weakform_surface::sourceanalysis_type& weakform_surface::
  sourceanalysis () const
  {
    return this->sourceanalysis_.get ();
  }

  weakform_surface::sourceanalysis_type& weakform_surface::
  sourceanalysis ()
  {
    return this->sourceanalysis_.get ();
  }

  void weakform_surface::
  sourceanalysis (const sourceanalysis_type& x)
  {
    this->sourceanalysis_.set (x);
  }

  void weakform_surface::
  sourceanalysis (::std::auto_ptr< sourceanalysis_type > x)
  {
    this->sourceanalysis_.set (x);
  }

  const weakform_surface::targetanalysis_type& weakform_surface::
  targetanalysis () const
  {
    return this->targetanalysis_.get ();
  }

  weakform_surface::targetanalysis_type& weakform_surface::
  targetanalysis ()
  {
    return this->targetanalysis_.get ();
  }

  void weakform_surface::
  targetanalysis (const targetanalysis_type& x)
  {
    this->targetanalysis_.set (x);
  }

  void weakform_surface::
  targetanalysis (::std::auto_ptr< targetanalysis_type > x)
  {
    this->targetanalysis_.set (x);
  }


  // weakforms_surface
  // 

  const weakforms_surface::weakform_surface_sequence& weakforms_surface::
  weakform_surface () const
  {
    return this->weakform_surface_;
  }

  weakforms_surface::weakform_surface_sequence& weakforms_surface::
  weakform_surface ()
  {
    return this->weakform_surface_;
  }

  void weakforms_surface::
  weakform_surface (const weakform_surface_sequence& s)
  {
    this->weakform_surface_ = s;
  }


  // weakform_volume
  // 

  const weakform_volume::matrix_form_sequence& weakform_volume::
  matrix_form () const
  {
    return this->matrix_form_;
  }

  weakform_volume::matrix_form_sequence& weakform_volume::
  matrix_form ()
  {
    return this->matrix_form_;
  }

  void weakform_volume::
  matrix_form (const matrix_form_sequence& s)
  {
    this->matrix_form_ = s;
  }

  const weakform_volume::vector_form_sequence& weakform_volume::
  vector_form () const
  {
    return this->vector_form_;
  }

  weakform_volume::vector_form_sequence& weakform_volume::
  vector_form ()
  {
    return this->vector_form_;
  }

  void weakform_volume::
  vector_form (const vector_form_sequence& s)
  {
    this->vector_form_ = s;
  }

  const weakform_volume::couplingtype_type& weakform_volume::
  couplingtype () const
  {
    return this->couplingtype_.get ();
  }

  weakform_volume::couplingtype_type& weakform_volume::
  couplingtype ()
  {
    return this->couplingtype_.get ();
  }

  void weakform_volume::
  couplingtype (const couplingtype_type& x)
  {
    this->couplingtype_.set (x);
  }

  void weakform_volume::
  couplingtype (::std::auto_ptr< couplingtype_type > x)
  {
    this->couplingtype_.set (x);
  }

  const weakform_volume::sourceanalysis_type& weakform_volume::
  sourceanalysis () const
  {
    return this->sourceanalysis_.get ();
  }

  weakform_volume::sourceanalysis_type& weakform_volume::
  sourceanalysis ()
  {
    return this->sourceanalysis_.get ();
  }

  void weakform_volume::
  sourceanalysis (const sourceanalysis_type& x)
  {
    this->sourceanalysis_.set (x);
  }

  void weakform_volume::
  sourceanalysis (::std::auto_ptr< sourceanalysis_type > x)
  {
    this->sourceanalysis_.set (x);
  }

  const weakform_volume::targetanalysis_type& weakform_volume::
  targetanalysis () const
  {
    return this->targetanalysis_.get ();
  }

  weakform_volume::targetanalysis_type& weakform_volume::
  targetanalysis ()
  {
    return this->targetanalysis_.get ();
  }

  void weakform_volume::
  targetanalysis (const targetanalysis_type& x)
  {
    this->targetanalysis_.set (x);
  }

  void weakform_volume::
  targetanalysis (::std::auto_ptr< targetanalysis_type > x)
  {
    this->targetanalysis_.set (x);
  }


  // matrix_form
  // 

  const matrix_form::id_type& matrix_form::
  id () const
  {
    return this->id_.get ();
  }

  matrix_form::id_type& matrix_form::
  id ()
  {
    return this->id_.get ();
  }

  void matrix_form::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void matrix_form::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }

  const matrix_form::i_type& matrix_form::
  i () const
  {
    return this->i_.get ();
  }

  matrix_form::i_type& matrix_form::
  i ()
  {
    return this->i_.get ();
  }

  void matrix_form::
  i (const i_type& x)
  {
    this->i_.set (x);
  }

  const matrix_form::j_type& matrix_form::
  j () const
  {
    return this->j_.get ();
  }

  matrix_form::j_type& matrix_form::
  j ()
  {
    return this->j_.get ();
  }

  void matrix_form::
  j (const j_type& x)
  {
    this->j_.set (x);
  }

  const matrix_form::axi_linear_type& matrix_form::
  axi_linear () const
  {
    return this->axi_linear_.get ();
  }

  matrix_form::axi_linear_type& matrix_form::
  axi_linear ()
  {
    return this->axi_linear_.get ();
  }

  void matrix_form::
  axi_linear (const axi_linear_type& x)
  {
    this->axi_linear_.set (x);
  }

  void matrix_form::
  axi_linear (::std::auto_ptr< axi_linear_type > x)
  {
    this->axi_linear_.set (x);
  }

  const matrix_form::planar_linear_type& matrix_form::
  planar_linear () const
  {
    return this->planar_linear_.get ();
  }

  matrix_form::planar_linear_type& matrix_form::
  planar_linear ()
  {
    return this->planar_linear_.get ();
  }

  void matrix_form::
  planar_linear (const planar_linear_type& x)
  {
    this->planar_linear_.set (x);
  }

  void matrix_form::
  planar_linear (::std::auto_ptr< planar_linear_type > x)
  {
    this->planar_linear_.set (x);
  }

  const matrix_form::axi_newton_type& matrix_form::
  axi_newton () const
  {
    return this->axi_newton_.get ();
  }

  matrix_form::axi_newton_type& matrix_form::
  axi_newton ()
  {
    return this->axi_newton_.get ();
  }

  void matrix_form::
  axi_newton (const axi_newton_type& x)
  {
    this->axi_newton_.set (x);
  }

  void matrix_form::
  axi_newton (::std::auto_ptr< axi_newton_type > x)
  {
    this->axi_newton_.set (x);
  }

  const matrix_form::planar_newton_type& matrix_form::
  planar_newton () const
  {
    return this->planar_newton_.get ();
  }

  matrix_form::planar_newton_type& matrix_form::
  planar_newton ()
  {
    return this->planar_newton_.get ();
  }

  void matrix_form::
  planar_newton (const planar_newton_type& x)
  {
    this->planar_newton_.set (x);
  }

  void matrix_form::
  planar_newton (::std::auto_ptr< planar_newton_type > x)
  {
    this->planar_newton_.set (x);
  }


  // vector_form
  // 

  const vector_form::id_type& vector_form::
  id () const
  {
    return this->id_.get ();
  }

  vector_form::id_type& vector_form::
  id ()
  {
    return this->id_.get ();
  }

  void vector_form::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void vector_form::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }

  const vector_form::i_type& vector_form::
  i () const
  {
    return this->i_.get ();
  }

  vector_form::i_type& vector_form::
  i ()
  {
    return this->i_.get ();
  }

  void vector_form::
  i (const i_type& x)
  {
    this->i_.set (x);
  }

  const vector_form::j_type& vector_form::
  j () const
  {
    return this->j_.get ();
  }

  vector_form::j_type& vector_form::
  j ()
  {
    return this->j_.get ();
  }

  void vector_form::
  j (const j_type& x)
  {
    this->j_.set (x);
  }

  const vector_form::axi_linear_type& vector_form::
  axi_linear () const
  {
    return this->axi_linear_.get ();
  }

  vector_form::axi_linear_type& vector_form::
  axi_linear ()
  {
    return this->axi_linear_.get ();
  }

  void vector_form::
  axi_linear (const axi_linear_type& x)
  {
    this->axi_linear_.set (x);
  }

  void vector_form::
  axi_linear (::std::auto_ptr< axi_linear_type > x)
  {
    this->axi_linear_.set (x);
  }

  const vector_form::planar_linear_type& vector_form::
  planar_linear () const
  {
    return this->planar_linear_.get ();
  }

  vector_form::planar_linear_type& vector_form::
  planar_linear ()
  {
    return this->planar_linear_.get ();
  }

  void vector_form::
  planar_linear (const planar_linear_type& x)
  {
    this->planar_linear_.set (x);
  }

  void vector_form::
  planar_linear (::std::auto_ptr< planar_linear_type > x)
  {
    this->planar_linear_.set (x);
  }

  const vector_form::axi_newton_type& vector_form::
  axi_newton () const
  {
    return this->axi_newton_.get ();
  }

  vector_form::axi_newton_type& vector_form::
  axi_newton ()
  {
    return this->axi_newton_.get ();
  }

  void vector_form::
  axi_newton (const axi_newton_type& x)
  {
    this->axi_newton_.set (x);
  }

  void vector_form::
  axi_newton (::std::auto_ptr< axi_newton_type > x)
  {
    this->axi_newton_.set (x);
  }

  const vector_form::planar_newton_type& vector_form::
  planar_newton () const
  {
    return this->planar_newton_.get ();
  }

  vector_form::planar_newton_type& vector_form::
  planar_newton ()
  {
    return this->planar_newton_.get ();
  }

  void vector_form::
  planar_newton (const planar_newton_type& x)
  {
    this->planar_newton_.set (x);
  }

  void vector_form::
  planar_newton (::std::auto_ptr< planar_newton_type > x)
  {
    this->planar_newton_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace XMLCoupling
{
  // coupling
  //

  coupling::
  coupling (const general_type& general,
            const constants_type& constants,
            const volume_type& volume)
  : ::xml_schema::type (),
    general_ (general, ::xml_schema::flags (), this),
    constants_ (constants, ::xml_schema::flags (), this),
    volume_ (volume, ::xml_schema::flags (), this)
  {
  }

  coupling::
  coupling (::std::auto_ptr< general_type >& general,
            ::std::auto_ptr< constants_type >& constants,
            ::std::auto_ptr< volume_type >& volume)
  : ::xml_schema::type (),
    general_ (general, ::xml_schema::flags (), this),
    constants_ (constants, ::xml_schema::flags (), this),
    volume_ (volume, ::xml_schema::flags (), this)
  {
  }

  coupling::
  coupling (const coupling& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    general_ (x.general_, f, this),
    constants_ (x.constants_, f, this),
    volume_ (x.volume_, f, this)
  {
  }

  coupling::
  coupling (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    general_ (f, this),
    constants_ (f, this),
    volume_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void coupling::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // general
      //
      if (n.name () == "general" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< general_type > r (
          general_traits::create (i, f, this));

        if (!general_.present ())
        {
          this->general_.set (r);
          continue;
        }
      }

      // constants
      //
      if (n.name () == "constants" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< constants_type > r (
          constants_traits::create (i, f, this));

        if (!constants_.present ())
        {
          this->constants_.set (r);
          continue;
        }
      }

      // volume
      //
      if (n.name () == "volume" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< volume_type > r (
          volume_traits::create (i, f, this));

        if (!volume_.present ())
        {
          this->volume_.set (r);
          continue;
        }
      }

      break;
    }

    if (!general_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "general",
        "XMLCoupling");
    }

    if (!constants_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "constants",
        "XMLCoupling");
    }

    if (!volume_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "volume",
        "XMLCoupling");
    }
  }

  coupling* coupling::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class coupling (*this, f, c);
  }

  coupling::
  ~coupling ()
  {
  }

  // general
  //

  general::
  general (const description_type& description,
           const modules_type& modules,
           const id_type& id,
           const name_type& name)
  : ::xml_schema::type (),
    description_ (description, ::xml_schema::flags (), this),
    modules_ (modules, ::xml_schema::flags (), this),
    id_ (id, ::xml_schema::flags (), this),
    name_ (name, ::xml_schema::flags (), this)
  {
  }

  general::
  general (const description_type& description,
           ::std::auto_ptr< modules_type >& modules,
           const id_type& id,
           const name_type& name)
  : ::xml_schema::type (),
    description_ (description, ::xml_schema::flags (), this),
    modules_ (modules, ::xml_schema::flags (), this),
    id_ (id, ::xml_schema::flags (), this),
    name_ (name, ::xml_schema::flags (), this)
  {
  }

  general::
  general (const general& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    description_ (x.description_, f, this),
    modules_ (x.modules_, f, this),
    id_ (x.id_, f, this),
    name_ (x.name_, f, this)
  {
  }

  general::
  general (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    description_ (f, this),
    modules_ (f, this),
    id_ (f, this),
    name_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void general::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // description
      //
      if (n.name () == "description" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< description_type > r (
          description_traits::create (i, f, this));

        if (!description_.present ())
        {
          this->description_.set (r);
          continue;
        }
      }

      // modules
      //
      if (n.name () == "modules" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< modules_type > r (
          modules_traits::create (i, f, this));

        if (!modules_.present ())
        {
          this->modules_.set (r);
          continue;
        }
      }

      break;
    }

    if (!description_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "description",
        "XMLCoupling");
    }

    if (!modules_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "modules",
        "XMLCoupling");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id_.set (r);
        continue;
      }

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name_.set (r);
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "name",
        "");
    }
  }

  general* general::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class general (*this, f, c);
  }

  general::
  ~general ()
  {
  }

  // constants
  //

  constants::
  constants ()
  : ::xml_schema::type (),
    constant_ (::xml_schema::flags (), this)
  {
  }

  constants::
  constants (const constants& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    constant_ (x.constant_, f, this)
  {
  }

  constants::
  constants (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    constant_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void constants::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // constant
      //
      if (n.name () == "constant" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< constant_type > r (
          constant_traits::create (i, f, this));

        this->constant_.push_back (r);
        continue;
      }

      break;
    }
  }

  constants* constants::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class constants (*this, f, c);
  }

  constants::
  ~constants ()
  {
  }

  // constant
  //

  constant::
  constant (const id_type& id,
            const value_type& value)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    value_ (value, ::xml_schema::flags (), this)
  {
  }

  constant::
  constant (const constant& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this)
  {
  }

  constant::
  constant (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void constant::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id_.set (r);
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "value",
        "");
    }
  }

  constant* constant::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class constant (*this, f, c);
  }

  constant::
  ~constant ()
  {
  }

  // modules
  //

  modules::
  modules (const source_type& source,
           const target_type& target)
  : ::xml_schema::type (),
    source_ (source, ::xml_schema::flags (), this),
    target_ (target, ::xml_schema::flags (), this)
  {
  }

  modules::
  modules (::std::auto_ptr< source_type >& source,
           ::std::auto_ptr< target_type >& target)
  : ::xml_schema::type (),
    source_ (source, ::xml_schema::flags (), this),
    target_ (target, ::xml_schema::flags (), this)
  {
  }

  modules::
  modules (const modules& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    source_ (x.source_, f, this),
    target_ (x.target_, f, this)
  {
  }

  modules::
  modules (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    source_ (f, this),
    target_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void modules::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // source
      //
      if (n.name () == "source" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< source_type > r (
          source_traits::create (i, f, this));

        if (!source_.present ())
        {
          this->source_.set (r);
          continue;
        }
      }

      // target
      //
      if (n.name () == "target" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< target_type > r (
          target_traits::create (i, f, this));

        if (!target_.present ())
        {
          this->target_.set (r);
          continue;
        }
      }

      break;
    }

    if (!source_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "source",
        "XMLCoupling");
    }

    if (!target_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "target",
        "XMLCoupling");
    }
  }

  modules* modules::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class modules (*this, f, c);
  }

  modules::
  ~modules ()
  {
  }

  // source
  //

  source::
  source (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this)
  {
  }

  source::
  source (const source& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this)
  {
  }

  source::
  source (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void source::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id_.set (r);
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  source* source::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class source (*this, f, c);
  }

  source::
  ~source ()
  {
  }

  // target
  //

  target::
  target (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this)
  {
  }

  target::
  target (const target& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this)
  {
  }

  target::
  target (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void target::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id_.set (r);
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  target* target::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class target (*this, f, c);
  }

  target::
  ~target ()
  {
  }

  // volume
  //

  volume::
  volume (const weakforms_volume_type& weakforms_volume)
  : ::xml_schema::type (),
    weakforms_volume_ (weakforms_volume, ::xml_schema::flags (), this)
  {
  }

  volume::
  volume (::std::auto_ptr< weakforms_volume_type >& weakforms_volume)
  : ::xml_schema::type (),
    weakforms_volume_ (weakforms_volume, ::xml_schema::flags (), this)
  {
  }

  volume::
  volume (const volume& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    weakforms_volume_ (x.weakforms_volume_, f, this)
  {
  }

  volume::
  volume (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    weakforms_volume_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void volume::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // weakforms_volume
      //
      if (n.name () == "weakforms_volume" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< weakforms_volume_type > r (
          weakforms_volume_traits::create (i, f, this));

        if (!weakforms_volume_.present ())
        {
          this->weakforms_volume_.set (r);
          continue;
        }
      }

      break;
    }

    if (!weakforms_volume_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "weakforms_volume",
        "XMLCoupling");
    }
  }

  volume* volume::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class volume (*this, f, c);
  }

  volume::
  ~volume ()
  {
  }

  // weakforms_volume
  //

  weakforms_volume::
  weakforms_volume ()
  : ::xml_schema::type (),
    weakform_volume_ (::xml_schema::flags (), this)
  {
  }

  weakforms_volume::
  weakforms_volume (const weakforms_volume& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    weakform_volume_ (x.weakform_volume_, f, this)
  {
  }

  weakforms_volume::
  weakforms_volume (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    weakform_volume_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void weakforms_volume::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // weakform_volume
      //
      if (n.name () == "weakform_volume" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< weakform_volume_type > r (
          weakform_volume_traits::create (i, f, this));

        this->weakform_volume_.push_back (r);
        continue;
      }

      break;
    }
  }

  weakforms_volume* weakforms_volume::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class weakforms_volume (*this, f, c);
  }

  weakforms_volume::
  ~weakforms_volume ()
  {
  }

  // weakform_surface
  //

  weakform_surface::
  weakform_surface (const couplingtype_type& couplingtype,
                    const sourceanalysis_type& sourceanalysis,
                    const targetanalysis_type& targetanalysis)
  : ::xml_schema::type (),
    matrix_form_ (::xml_schema::flags (), this),
    vector_form_ (::xml_schema::flags (), this),
    couplingtype_ (couplingtype, ::xml_schema::flags (), this),
    sourceanalysis_ (sourceanalysis, ::xml_schema::flags (), this),
    targetanalysis_ (targetanalysis, ::xml_schema::flags (), this)
  {
  }

  weakform_surface::
  weakform_surface (const weakform_surface& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    matrix_form_ (x.matrix_form_, f, this),
    vector_form_ (x.vector_form_, f, this),
    couplingtype_ (x.couplingtype_, f, this),
    sourceanalysis_ (x.sourceanalysis_, f, this),
    targetanalysis_ (x.targetanalysis_, f, this)
  {
  }

  weakform_surface::
  weakform_surface (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    matrix_form_ (f, this),
    vector_form_ (f, this),
    couplingtype_ (f, this),
    sourceanalysis_ (f, this),
    targetanalysis_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void weakform_surface::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // matrix_form
      //
      if (n.name () == "matrix_form" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< matrix_form_type > r (
          matrix_form_traits::create (i, f, this));

        this->matrix_form_.push_back (r);
        continue;
      }

      // vector_form
      //
      if (n.name () == "vector_form" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< vector_form_type > r (
          vector_form_traits::create (i, f, this));

        this->vector_form_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "couplingtype" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< couplingtype_type > r (
          couplingtype_traits::create (i, f, this));

        this->couplingtype_.set (r);
        continue;
      }

      if (n.name () == "sourceanalysis" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< sourceanalysis_type > r (
          sourceanalysis_traits::create (i, f, this));

        this->sourceanalysis_.set (r);
        continue;
      }

      if (n.name () == "targetanalysis" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< targetanalysis_type > r (
          targetanalysis_traits::create (i, f, this));

        this->targetanalysis_.set (r);
        continue;
      }
    }

    if (!couplingtype_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "couplingtype",
        "");
    }

    if (!sourceanalysis_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "sourceanalysis",
        "");
    }

    if (!targetanalysis_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "targetanalysis",
        "");
    }
  }

  weakform_surface* weakform_surface::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class weakform_surface (*this, f, c);
  }

  weakform_surface::
  ~weakform_surface ()
  {
  }

  // weakforms_surface
  //

  weakforms_surface::
  weakforms_surface ()
  : ::xml_schema::type (),
    weakform_surface_ (::xml_schema::flags (), this)
  {
  }

  weakforms_surface::
  weakforms_surface (const weakforms_surface& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    weakform_surface_ (x.weakform_surface_, f, this)
  {
  }

  weakforms_surface::
  weakforms_surface (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    weakform_surface_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void weakforms_surface::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // weakform_surface
      //
      if (n.name () == "weakform_surface" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< weakform_surface_type > r (
          weakform_surface_traits::create (i, f, this));

        this->weakform_surface_.push_back (r);
        continue;
      }

      break;
    }
  }

  weakforms_surface* weakforms_surface::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class weakforms_surface (*this, f, c);
  }

  weakforms_surface::
  ~weakforms_surface ()
  {
  }

  // weakform_volume
  //

  weakform_volume::
  weakform_volume (const couplingtype_type& couplingtype,
                   const sourceanalysis_type& sourceanalysis,
                   const targetanalysis_type& targetanalysis)
  : ::xml_schema::type (),
    matrix_form_ (::xml_schema::flags (), this),
    vector_form_ (::xml_schema::flags (), this),
    couplingtype_ (couplingtype, ::xml_schema::flags (), this),
    sourceanalysis_ (sourceanalysis, ::xml_schema::flags (), this),
    targetanalysis_ (targetanalysis, ::xml_schema::flags (), this)
  {
  }

  weakform_volume::
  weakform_volume (const weakform_volume& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    matrix_form_ (x.matrix_form_, f, this),
    vector_form_ (x.vector_form_, f, this),
    couplingtype_ (x.couplingtype_, f, this),
    sourceanalysis_ (x.sourceanalysis_, f, this),
    targetanalysis_ (x.targetanalysis_, f, this)
  {
  }

  weakform_volume::
  weakform_volume (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    matrix_form_ (f, this),
    vector_form_ (f, this),
    couplingtype_ (f, this),
    sourceanalysis_ (f, this),
    targetanalysis_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void weakform_volume::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // matrix_form
      //
      if (n.name () == "matrix_form" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< matrix_form_type > r (
          matrix_form_traits::create (i, f, this));

        this->matrix_form_.push_back (r);
        continue;
      }

      // vector_form
      //
      if (n.name () == "vector_form" && n.namespace_ () == "XMLCoupling")
      {
        ::std::auto_ptr< vector_form_type > r (
          vector_form_traits::create (i, f, this));

        this->vector_form_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "couplingtype" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< couplingtype_type > r (
          couplingtype_traits::create (i, f, this));

        this->couplingtype_.set (r);
        continue;
      }

      if (n.name () == "sourceanalysis" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< sourceanalysis_type > r (
          sourceanalysis_traits::create (i, f, this));

        this->sourceanalysis_.set (r);
        continue;
      }

      if (n.name () == "targetanalysis" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< targetanalysis_type > r (
          targetanalysis_traits::create (i, f, this));

        this->targetanalysis_.set (r);
        continue;
      }
    }

    if (!couplingtype_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "couplingtype",
        "");
    }

    if (!sourceanalysis_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "sourceanalysis",
        "");
    }

    if (!targetanalysis_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "targetanalysis",
        "");
    }
  }

  weakform_volume* weakform_volume::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class weakform_volume (*this, f, c);
  }

  weakform_volume::
  ~weakform_volume ()
  {
  }

  // matrix_form
  //

  matrix_form::
  matrix_form (const id_type& id,
               const i_type& i,
               const j_type& j,
               const axi_linear_type& axi_linear,
               const planar_linear_type& planar_linear,
               const axi_newton_type& axi_newton,
               const planar_newton_type& planar_newton)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    i_ (i, ::xml_schema::flags (), this),
    j_ (j, ::xml_schema::flags (), this),
    axi_linear_ (axi_linear, ::xml_schema::flags (), this),
    planar_linear_ (planar_linear, ::xml_schema::flags (), this),
    axi_newton_ (axi_newton, ::xml_schema::flags (), this),
    planar_newton_ (planar_newton, ::xml_schema::flags (), this)
  {
  }

  matrix_form::
  matrix_form (const matrix_form& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    i_ (x.i_, f, this),
    j_ (x.j_, f, this),
    axi_linear_ (x.axi_linear_, f, this),
    planar_linear_ (x.planar_linear_, f, this),
    axi_newton_ (x.axi_newton_, f, this),
    planar_newton_ (x.planar_newton_, f, this)
  {
  }

  matrix_form::
  matrix_form (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    i_ (f, this),
    j_ (f, this),
    axi_linear_ (f, this),
    planar_linear_ (f, this),
    axi_newton_ (f, this),
    planar_newton_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void matrix_form::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id_.set (r);
        continue;
      }

      if (n.name () == "i" && n.namespace_ ().empty ())
      {
        this->i_.set (i_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "j" && n.namespace_ ().empty ())
      {
        this->j_.set (j_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "axi_linear" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< axi_linear_type > r (
          axi_linear_traits::create (i, f, this));

        this->axi_linear_.set (r);
        continue;
      }

      if (n.name () == "planar_linear" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< planar_linear_type > r (
          planar_linear_traits::create (i, f, this));

        this->planar_linear_.set (r);
        continue;
      }

      if (n.name () == "axi_newton" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< axi_newton_type > r (
          axi_newton_traits::create (i, f, this));

        this->axi_newton_.set (r);
        continue;
      }

      if (n.name () == "planar_newton" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< planar_newton_type > r (
          planar_newton_traits::create (i, f, this));

        this->planar_newton_.set (r);
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!i_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "i",
        "");
    }

    if (!j_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "j",
        "");
    }

    if (!axi_linear_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "axi_linear",
        "");
    }

    if (!planar_linear_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "planar_linear",
        "");
    }

    if (!axi_newton_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "axi_newton",
        "");
    }

    if (!planar_newton_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "planar_newton",
        "");
    }
  }

  matrix_form* matrix_form::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class matrix_form (*this, f, c);
  }

  matrix_form::
  ~matrix_form ()
  {
  }

  // vector_form
  //

  vector_form::
  vector_form (const id_type& id,
               const i_type& i,
               const j_type& j,
               const axi_linear_type& axi_linear,
               const planar_linear_type& planar_linear,
               const axi_newton_type& axi_newton,
               const planar_newton_type& planar_newton)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    i_ (i, ::xml_schema::flags (), this),
    j_ (j, ::xml_schema::flags (), this),
    axi_linear_ (axi_linear, ::xml_schema::flags (), this),
    planar_linear_ (planar_linear, ::xml_schema::flags (), this),
    axi_newton_ (axi_newton, ::xml_schema::flags (), this),
    planar_newton_ (planar_newton, ::xml_schema::flags (), this)
  {
  }

  vector_form::
  vector_form (const vector_form& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    i_ (x.i_, f, this),
    j_ (x.j_, f, this),
    axi_linear_ (x.axi_linear_, f, this),
    planar_linear_ (x.planar_linear_, f, this),
    axi_newton_ (x.axi_newton_, f, this),
    planar_newton_ (x.planar_newton_, f, this)
  {
  }

  vector_form::
  vector_form (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    i_ (f, this),
    j_ (f, this),
    axi_linear_ (f, this),
    planar_linear_ (f, this),
    axi_newton_ (f, this),
    planar_newton_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void vector_form::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id_.set (r);
        continue;
      }

      if (n.name () == "i" && n.namespace_ ().empty ())
      {
        this->i_.set (i_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "j" && n.namespace_ ().empty ())
      {
        this->j_.set (j_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "axi_linear" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< axi_linear_type > r (
          axi_linear_traits::create (i, f, this));

        this->axi_linear_.set (r);
        continue;
      }

      if (n.name () == "planar_linear" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< planar_linear_type > r (
          planar_linear_traits::create (i, f, this));

        this->planar_linear_.set (r);
        continue;
      }

      if (n.name () == "axi_newton" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< axi_newton_type > r (
          axi_newton_traits::create (i, f, this));

        this->axi_newton_.set (r);
        continue;
      }

      if (n.name () == "planar_newton" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< planar_newton_type > r (
          planar_newton_traits::create (i, f, this));

        this->planar_newton_.set (r);
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!i_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "i",
        "");
    }

    if (!j_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "j",
        "");
    }

    if (!axi_linear_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "axi_linear",
        "");
    }

    if (!planar_linear_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "planar_linear",
        "");
    }

    if (!axi_newton_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "axi_newton",
        "");
    }

    if (!planar_newton_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "planar_newton",
        "");
    }
  }

  vector_form* vector_form::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class vector_form (*this, f, c);
  }

  vector_form::
  ~vector_form ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace XMLCoupling
{
  ::std::ostream&
  operator<< (::std::ostream& o, const coupling& i)
  {
    o << ::std::endl << "general: " << i.general ();
    o << ::std::endl << "constants: " << i.constants ();
    o << ::std::endl << "volume: " << i.volume ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const general& i)
  {
    o << ::std::endl << "description: " << i.description ();
    o << ::std::endl << "modules: " << i.modules ();
    o << ::std::endl << "id: " << i.id ();
    o << ::std::endl << "name: " << i.name ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const constants& i)
  {
    for (constants::constant_const_iterator
         b (i.constant ().begin ()), e (i.constant ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "constant: " << *b;
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const constant& i)
  {
    o << ::std::endl << "id: " << i.id ();
    o << ::std::endl << "value: " << i.value ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const modules& i)
  {
    o << ::std::endl << "source: " << i.source ();
    o << ::std::endl << "target: " << i.target ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const source& i)
  {
    o << ::std::endl << "id: " << i.id ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const target& i)
  {
    o << ::std::endl << "id: " << i.id ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const volume& i)
  {
    o << ::std::endl << "weakforms_volume: " << i.weakforms_volume ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const weakforms_volume& i)
  {
    for (weakforms_volume::weakform_volume_const_iterator
         b (i.weakform_volume ().begin ()), e (i.weakform_volume ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "weakform_volume: " << *b;
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const weakform_surface& i)
  {
    for (weakform_surface::matrix_form_const_iterator
         b (i.matrix_form ().begin ()), e (i.matrix_form ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "matrix_form: " << *b;
    }

    for (weakform_surface::vector_form_const_iterator
         b (i.vector_form ().begin ()), e (i.vector_form ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "vector_form: " << *b;
    }

    o << ::std::endl << "couplingtype: " << i.couplingtype ();
    o << ::std::endl << "sourceanalysis: " << i.sourceanalysis ();
    o << ::std::endl << "targetanalysis: " << i.targetanalysis ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const weakforms_surface& i)
  {
    for (weakforms_surface::weakform_surface_const_iterator
         b (i.weakform_surface ().begin ()), e (i.weakform_surface ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "weakform_surface: " << *b;
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const weakform_volume& i)
  {
    for (weakform_volume::matrix_form_const_iterator
         b (i.matrix_form ().begin ()), e (i.matrix_form ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "matrix_form: " << *b;
    }

    for (weakform_volume::vector_form_const_iterator
         b (i.vector_form ().begin ()), e (i.vector_form ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "vector_form: " << *b;
    }

    o << ::std::endl << "couplingtype: " << i.couplingtype ();
    o << ::std::endl << "sourceanalysis: " << i.sourceanalysis ();
    o << ::std::endl << "targetanalysis: " << i.targetanalysis ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const matrix_form& i)
  {
    o << ::std::endl << "id: " << i.id ();
    o << ::std::endl << "i: " << i.i ();
    o << ::std::endl << "j: " << i.j ();
    o << ::std::endl << "axi_linear: " << i.axi_linear ();
    o << ::std::endl << "planar_linear: " << i.planar_linear ();
    o << ::std::endl << "axi_newton: " << i.axi_newton ();
    o << ::std::endl << "planar_newton: " << i.planar_newton ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const vector_form& i)
  {
    o << ::std::endl << "id: " << i.id ();
    o << ::std::endl << "i: " << i.i ();
    o << ::std::endl << "j: " << i.j ();
    o << ::std::endl << "axi_linear: " << i.axi_linear ();
    o << ::std::endl << "planar_linear: " << i.planar_linear ();
    o << ::std::endl << "axi_newton: " << i.axi_newton ();
    o << ::std::endl << "planar_newton: " << i.planar_newton ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace XMLCoupling
{
  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::XMLCoupling::coupling > r (
      ::XMLCoupling::coupling_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLCoupling::coupling > r (
      ::XMLCoupling::coupling_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLCoupling::coupling > r (
      ::XMLCoupling::coupling_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLCoupling::coupling_ (isrc, f, p);
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLCoupling::coupling_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLCoupling::coupling_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLCoupling::coupling_ (isrc, f, p);
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLCoupling::coupling_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLCoupling::coupling_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::XMLCoupling::coupling > r (
      ::XMLCoupling::coupling_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLCoupling::coupling > r (
      ::XMLCoupling::coupling_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLCoupling::coupling > r (
      ::XMLCoupling::coupling_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::XMLCoupling::coupling > r (
        ::XMLCoupling::coupling_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "coupling" &&
        n.namespace_ () == "XMLCoupling")
    {
      ::std::auto_ptr< ::XMLCoupling::coupling > r (
        ::xsd::cxx::tree::traits< ::XMLCoupling::coupling, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "coupling",
      "XMLCoupling");
  }

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "coupling" &&
        n.namespace_ () == "XMLCoupling")
    {
      ::std::auto_ptr< ::XMLCoupling::coupling > r (
        ::xsd::cxx::tree::traits< ::XMLCoupling::coupling, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "coupling",
      "XMLCoupling");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace XMLCoupling
{
  void
  coupling_ (::std::ostream& o,
             const ::XMLCoupling::coupling& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLCoupling::coupling_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  coupling_ (::std::ostream& o,
             const ::XMLCoupling::coupling& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLCoupling::coupling_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  coupling_ (::std::ostream& o,
             const ::XMLCoupling::coupling& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLCoupling::coupling_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  coupling_ (::xercesc::XMLFormatTarget& t,
             const ::XMLCoupling::coupling& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLCoupling::coupling_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  coupling_ (::xercesc::XMLFormatTarget& t,
             const ::XMLCoupling::coupling& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLCoupling::coupling_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  coupling_ (::xercesc::XMLFormatTarget& t,
             const ::XMLCoupling::coupling& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLCoupling::coupling_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  coupling_ (::xercesc::DOMDocument& d,
             const ::XMLCoupling::coupling& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "coupling" &&
        n.namespace_ () == "XMLCoupling")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "coupling",
        "XMLCoupling");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  coupling_ (const ::XMLCoupling::coupling& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "coupling",
        "XMLCoupling",
        m, f));

    ::XMLCoupling::coupling_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const coupling& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // general
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "general",
          "XMLCoupling",
          e));

      s << i.general ();
    }

    // constants
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "constants",
          "XMLCoupling",
          e));

      s << i.constants ();
    }

    // volume
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "volume",
          "XMLCoupling",
          e));

      s << i.volume ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const general& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // description
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "description",
          "XMLCoupling",
          e));

      s << i.description ();
    }

    // modules
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "modules",
          "XMLCoupling",
          e));

      s << i.modules ();
    }

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << i.name ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const constants& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // constant
    //
    for (constants::constant_const_iterator
         b (i.constant ().begin ()), n (i.constant ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "constant",
          "XMLCoupling",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const constant& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << ::xml_schema::as_double(i.value ());
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const modules& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // source
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "source",
          "XMLCoupling",
          e));

      s << i.source ();
    }

    // target
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "target",
          "XMLCoupling",
          e));

      s << i.target ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const source& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const target& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const volume& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // weakforms_volume
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "weakforms_volume",
          "XMLCoupling",
          e));

      s << i.weakforms_volume ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const weakforms_volume& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // weakform_volume
    //
    for (weakforms_volume::weakform_volume_const_iterator
         b (i.weakform_volume ().begin ()), n (i.weakform_volume ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "weakform_volume",
          "XMLCoupling",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const weakform_surface& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // matrix_form
    //
    for (weakform_surface::matrix_form_const_iterator
         b (i.matrix_form ().begin ()), n (i.matrix_form ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "matrix_form",
          "XMLCoupling",
          e));

      s << *b;
    }

    // vector_form
    //
    for (weakform_surface::vector_form_const_iterator
         b (i.vector_form ().begin ()), n (i.vector_form ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "vector_form",
          "XMLCoupling",
          e));

      s << *b;
    }

    // couplingtype
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "couplingtype",
          e));

      a << i.couplingtype ();
    }

    // sourceanalysis
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "sourceanalysis",
          e));

      a << i.sourceanalysis ();
    }

    // targetanalysis
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "targetanalysis",
          e));

      a << i.targetanalysis ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const weakforms_surface& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // weakform_surface
    //
    for (weakforms_surface::weakform_surface_const_iterator
         b (i.weakform_surface ().begin ()), n (i.weakform_surface ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "weakform_surface",
          "XMLCoupling",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const weakform_volume& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // matrix_form
    //
    for (weakform_volume::matrix_form_const_iterator
         b (i.matrix_form ().begin ()), n (i.matrix_form ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "matrix_form",
          "XMLCoupling",
          e));

      s << *b;
    }

    // vector_form
    //
    for (weakform_volume::vector_form_const_iterator
         b (i.vector_form ().begin ()), n (i.vector_form ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "vector_form",
          "XMLCoupling",
          e));

      s << *b;
    }

    // couplingtype
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "couplingtype",
          e));

      a << i.couplingtype ();
    }

    // sourceanalysis
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "sourceanalysis",
          e));

      a << i.sourceanalysis ();
    }

    // targetanalysis
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "targetanalysis",
          e));

      a << i.targetanalysis ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const matrix_form& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // i
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "i",
          e));

      a << i.i ();
    }

    // j
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "j",
          e));

      a << i.j ();
    }

    // axi_linear
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "axi_linear",
          e));

      a << i.axi_linear ();
    }

    // planar_linear
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "planar_linear",
          e));

      a << i.planar_linear ();
    }

    // axi_newton
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "axi_newton",
          e));

      a << i.axi_newton ();
    }

    // planar_newton
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "planar_newton",
          e));

      a << i.planar_newton ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const vector_form& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // i
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "i",
          e));

      a << i.i ();
    }

    // j
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "j",
          e));

      a << i.j ();
    }

    // axi_linear
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "axi_linear",
          e));

      a << i.axi_linear ();
    }

    // planar_linear
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "planar_linear",
          e));

      a << i.planar_linear ();
    }

    // axi_newton
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "axi_newton",
          e));

      a << i.axi_newton ();
    }

    // planar_newton
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "planar_newton",
          e));

      a << i.planar_newton ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

