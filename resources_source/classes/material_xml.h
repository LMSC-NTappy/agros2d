// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KARBAN_PROJECTS_AGROS2D_ZALOHA_RESOURCES_XSD_MATERIAL_XML_H
#define CXX_HOME_KARBAN_PROJECTS_AGROS2D_ZALOHA_RESOURCES_XSD_MATERIAL_XML_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace XMLMaterial
{
  class material;
  class general;
  class properties;
  class property;
  class constant;
  class nonlinearity;
  class table;
  class function;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace XMLMaterial
{
  class material: public ::xml_schema::type
  {
    public:
    // general
    // 
    typedef ::XMLMaterial::general general_type;
    typedef ::xsd::cxx::tree::traits< general_type, char > general_traits;

    const general_type&
    general () const;

    general_type&
    general ();

    void
    general (const general_type& x);

    void
    general (::std::auto_ptr< general_type > p);

    // properties
    // 
    typedef ::XMLMaterial::properties properties_type;
    typedef ::xsd::cxx::tree::traits< properties_type, char > properties_traits;

    const properties_type&
    properties () const;

    properties_type&
    properties ();

    void
    properties (const properties_type& x);

    void
    properties (::std::auto_ptr< properties_type > p);

    // Constructors.
    //
    material (const general_type&,
              const properties_type&);

    material (::std::auto_ptr< general_type >&,
              ::std::auto_ptr< properties_type >&);

    material (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    material (const material& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual material*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~material ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< general_type > general_;
    ::xsd::cxx::tree::one< properties_type > properties_;
  };

  class general: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // description
    // 
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::optional< description_type > description_optional;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_optional&
    description () const;

    description_optional&
    description ();

    void
    description (const description_type& x);

    void
    description (const description_optional& x);

    void
    description (::std::auto_ptr< description_type > p);

    // Constructors.
    //
    general (const name_type&);

    general (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    general (const general& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual general*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~general ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    description_optional description_;
  };

  class properties: public ::xml_schema::type
  {
    public:
    // property
    // 
    typedef ::XMLMaterial::property property_type;
    typedef ::xsd::cxx::tree::sequence< property_type > property_sequence;
    typedef property_sequence::iterator property_iterator;
    typedef property_sequence::const_iterator property_const_iterator;
    typedef ::xsd::cxx::tree::traits< property_type, char > property_traits;

    const property_sequence&
    property () const;

    property_sequence&
    property ();

    void
    property (const property_sequence& s);

    // Constructors.
    //
    properties ();

    properties (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    properties (const properties& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual properties*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~properties ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    property_sequence property_;
  };

  class property: public ::xml_schema::type
  {
    public:
    // constant
    // 
    typedef ::XMLMaterial::constant constant_type;
    typedef ::xsd::cxx::tree::optional< constant_type > constant_optional;
    typedef ::xsd::cxx::tree::traits< constant_type, char > constant_traits;

    const constant_optional&
    constant () const;

    constant_optional&
    constant ();

    void
    constant (const constant_type& x);

    void
    constant (const constant_optional& x);

    void
    constant (::std::auto_ptr< constant_type > p);

    // nonlinearity
    // 
    typedef ::XMLMaterial::nonlinearity nonlinearity_type;
    typedef ::xsd::cxx::tree::optional< nonlinearity_type > nonlinearity_optional;
    typedef ::xsd::cxx::tree::traits< nonlinearity_type, char > nonlinearity_traits;

    const nonlinearity_optional&
    nonlinearity () const;

    nonlinearity_optional&
    nonlinearity ();

    void
    nonlinearity (const nonlinearity_type& x);

    void
    nonlinearity (const nonlinearity_optional& x);

    void
    nonlinearity (::std::auto_ptr< nonlinearity_type > p);

    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // shortname
    // 
    typedef ::xml_schema::string shortname_type;
    typedef ::xsd::cxx::tree::traits< shortname_type, char > shortname_traits;

    const shortname_type&
    shortname () const;

    shortname_type&
    shortname ();

    void
    shortname (const shortname_type& x);

    void
    shortname (::std::auto_ptr< shortname_type > p);

    // unit
    // 
    typedef ::xml_schema::string unit_type;
    typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

    const unit_type&
    unit () const;

    unit_type&
    unit ();

    void
    unit (const unit_type& x);

    void
    unit (::std::auto_ptr< unit_type > p);

    // source
    // 
    typedef ::xml_schema::string source_type;
    typedef ::xsd::cxx::tree::traits< source_type, char > source_traits;

    const source_type&
    source () const;

    source_type&
    source ();

    void
    source (const source_type& x);

    void
    source (::std::auto_ptr< source_type > p);

    // nonlinearity_kind
    // 
    typedef ::xml_schema::string nonlinearity_kind_type;
    typedef ::xsd::cxx::tree::traits< nonlinearity_kind_type, char > nonlinearity_kind_traits;

    const nonlinearity_kind_type&
    nonlinearity_kind () const;

    nonlinearity_kind_type&
    nonlinearity_kind ();

    void
    nonlinearity_kind (const nonlinearity_kind_type& x);

    void
    nonlinearity_kind (::std::auto_ptr< nonlinearity_kind_type > p);

    // independent_shortname
    // 
    typedef ::xml_schema::string independent_shortname_type;
    typedef ::xsd::cxx::tree::traits< independent_shortname_type, char > independent_shortname_traits;

    const independent_shortname_type&
    independent_shortname () const;

    independent_shortname_type&
    independent_shortname ();

    void
    independent_shortname (const independent_shortname_type& x);

    void
    independent_shortname (::std::auto_ptr< independent_shortname_type > p);

    // independent_unit
    // 
    typedef ::xml_schema::string independent_unit_type;
    typedef ::xsd::cxx::tree::traits< independent_unit_type, char > independent_unit_traits;

    const independent_unit_type&
    independent_unit () const;

    independent_unit_type&
    independent_unit ();

    void
    independent_unit (const independent_unit_type& x);

    void
    independent_unit (::std::auto_ptr< independent_unit_type > p);

    // Constructors.
    //
    property (const name_type&,
              const shortname_type&,
              const unit_type&,
              const source_type&,
              const nonlinearity_kind_type&,
              const independent_shortname_type&,
              const independent_unit_type&);

    property (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    property (const property& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual property*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~property ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    constant_optional constant_;
    nonlinearity_optional nonlinearity_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< shortname_type > shortname_;
    ::xsd::cxx::tree::one< unit_type > unit_;
    ::xsd::cxx::tree::one< source_type > source_;
    ::xsd::cxx::tree::one< nonlinearity_kind_type > nonlinearity_kind_;
    ::xsd::cxx::tree::one< independent_shortname_type > independent_shortname_;
    ::xsd::cxx::tree::one< independent_unit_type > independent_unit_;
  };

  class constant: public ::xml_schema::type
  {
    public:
    // value
    // 
    typedef ::xml_schema::double_ value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char, ::xsd::cxx::tree::schema_type::double_ > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    // Constructors.
    //
    constant (const value_type&);

    constant (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    constant (const constant& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual constant*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~constant ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class nonlinearity: public ::xml_schema::type
  {
    public:
    // table
    // 
    typedef ::XMLMaterial::table table_type;
    typedef ::xsd::cxx::tree::optional< table_type > table_optional;
    typedef ::xsd::cxx::tree::traits< table_type, char > table_traits;

    const table_optional&
    table () const;

    table_optional&
    table ();

    void
    table (const table_type& x);

    void
    table (const table_optional& x);

    void
    table (::std::auto_ptr< table_type > p);

    // function
    // 
    typedef ::XMLMaterial::function function_type;
    typedef ::xsd::cxx::tree::optional< function_type > function_optional;
    typedef ::xsd::cxx::tree::traits< function_type, char > function_traits;

    const function_optional&
    function () const;

    function_optional&
    function ();

    void
    function (const function_type& x);

    void
    function (const function_optional& x);

    void
    function (::std::auto_ptr< function_type > p);

    // Constructors.
    //
    nonlinearity ();

    nonlinearity (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    nonlinearity (const nonlinearity& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual nonlinearity*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~nonlinearity ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    table_optional table_;
    function_optional function_;
  };

  class table: public ::xml_schema::type
  {
    public:
    // keys
    // 
    typedef ::xml_schema::string keys_type;
    typedef ::xsd::cxx::tree::traits< keys_type, char > keys_traits;

    const keys_type&
    keys () const;

    keys_type&
    keys ();

    void
    keys (const keys_type& x);

    void
    keys (::std::auto_ptr< keys_type > p);

    // values
    // 
    typedef ::xml_schema::string values_type;
    typedef ::xsd::cxx::tree::traits< values_type, char > values_traits;

    const values_type&
    values () const;

    values_type&
    values ();

    void
    values (const values_type& x);

    void
    values (::std::auto_ptr< values_type > p);

    // Constructors.
    //
    table (const keys_type&,
           const values_type&);

    table (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    table (const table& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual table*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~table ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< keys_type > keys_;
    ::xsd::cxx::tree::one< values_type > values_;
  };

  class function: public ::xml_schema::type
  {
    public:
    // body
    // 
    typedef ::xml_schema::string body_type;
    typedef ::xsd::cxx::tree::traits< body_type, char > body_traits;

    const body_type&
    body () const;

    body_type&
    body ();

    void
    body (const body_type& x);

    void
    body (::std::auto_ptr< body_type > p);

    // interval_from
    // 
    typedef ::xml_schema::double_ interval_from_type;
    typedef ::xsd::cxx::tree::traits< interval_from_type, char, ::xsd::cxx::tree::schema_type::double_ > interval_from_traits;

    const interval_from_type&
    interval_from () const;

    interval_from_type&
    interval_from ();

    void
    interval_from (const interval_from_type& x);

    // interval_to
    // 
    typedef ::xml_schema::double_ interval_to_type;
    typedef ::xsd::cxx::tree::traits< interval_to_type, char, ::xsd::cxx::tree::schema_type::double_ > interval_to_traits;

    const interval_to_type&
    interval_to () const;

    interval_to_type&
    interval_to ();

    void
    interval_to (const interval_to_type& x);

    // Constructors.
    //
    function (const body_type&,
              const interval_from_type&,
              const interval_to_type&);

    function (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    function (const function& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual function*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~function ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< body_type > body_;
    ::xsd::cxx::tree::one< interval_from_type > interval_from_;
    ::xsd::cxx::tree::one< interval_to_type > interval_to_;
  };
}

#include <iosfwd>

namespace XMLMaterial
{
  ::std::ostream&
  operator<< (::std::ostream&, const material&);

  ::std::ostream&
  operator<< (::std::ostream&, const general&);

  ::std::ostream&
  operator<< (::std::ostream&, const properties&);

  ::std::ostream&
  operator<< (::std::ostream&, const property&);

  ::std::ostream&
  operator<< (::std::ostream&, const constant&);

  ::std::ostream&
  operator<< (::std::ostream&, const nonlinearity&);

  ::std::ostream&
  operator<< (::std::ostream&, const table&);

  ::std::ostream&
  operator<< (::std::ostream&, const function&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace XMLMaterial
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace XMLMaterial
{
  // Serialize to std::ostream.
  //

  void
  material_ (::std::ostream& os,
             const ::XMLMaterial::material& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  material_ (::std::ostream& os,
             const ::XMLMaterial::material& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  material_ (::std::ostream& os,
             const ::XMLMaterial::material& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  material_ (::xercesc::XMLFormatTarget& ft,
             const ::XMLMaterial::material& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  material_ (::xercesc::XMLFormatTarget& ft,
             const ::XMLMaterial::material& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  material_ (::xercesc::XMLFormatTarget& ft,
             const ::XMLMaterial::material& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  material_ (::xercesc::DOMDocument& d,
             const ::XMLMaterial::material& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  material_ (const ::XMLMaterial::material& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const material&);

  void
  operator<< (::xercesc::DOMElement&, const general&);

  void
  operator<< (::xercesc::DOMElement&, const properties&);

  void
  operator<< (::xercesc::DOMElement&, const property&);

  void
  operator<< (::xercesc::DOMElement&, const constant&);

  void
  operator<< (::xercesc::DOMElement&, const nonlinearity&);

  void
  operator<< (::xercesc::DOMElement&, const table&);

  void
  operator<< (::xercesc::DOMElement&, const function&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KARBAN_PROJECTS_AGROS2D_ZALOHA_RESOURCES_XSD_MATERIAL_XML_H
