// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX______RESOURCES_XSD_COUPLING_XML_H
#define CXX______RESOURCES_XSD_COUPLING_XML_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace XMLCoupling
{
  class coupling;
  class general;
  class constants;
  class constant;
  class modules;
  class source;
  class target;
  class volume;
  class weakforms_volume;
  class weakform_surface;
  class weakforms_surface;
  class weakform_volume;
  class matrix_form;
  class vector_form;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace XMLCoupling
{
  class coupling: public ::xml_schema::type
  {
    public:
    // general
    // 
    typedef ::XMLCoupling::general general_type;
    typedef ::xsd::cxx::tree::traits< general_type, char > general_traits;

    const general_type&
    general () const;

    general_type&
    general ();

    void
    general (const general_type& x);

    void
    general (::std::auto_ptr< general_type > p);

    // constants
    // 
    typedef ::XMLCoupling::constants constants_type;
    typedef ::xsd::cxx::tree::traits< constants_type, char > constants_traits;

    const constants_type&
    constants () const;

    constants_type&
    constants ();

    void
    constants (const constants_type& x);

    void
    constants (::std::auto_ptr< constants_type > p);

    // volume
    // 
    typedef ::XMLCoupling::volume volume_type;
    typedef ::xsd::cxx::tree::traits< volume_type, char > volume_traits;

    const volume_type&
    volume () const;

    volume_type&
    volume ();

    void
    volume (const volume_type& x);

    void
    volume (::std::auto_ptr< volume_type > p);

    // Constructors.
    //
    coupling (const general_type&,
              const constants_type&,
              const volume_type&);

    coupling (::std::auto_ptr< general_type >&,
              ::std::auto_ptr< constants_type >&,
              ::std::auto_ptr< volume_type >&);

    coupling (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    coupling (const coupling& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual coupling*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~coupling ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< general_type > general_;
    ::xsd::cxx::tree::one< constants_type > constants_;
    ::xsd::cxx::tree::one< volume_type > volume_;
  };

  class general: public ::xml_schema::type
  {
    public:
    // description
    // 
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_type&
    description () const;

    description_type&
    description ();

    void
    description (const description_type& x);

    void
    description (::std::auto_ptr< description_type > p);

    // modules
    // 
    typedef ::XMLCoupling::modules modules_type;
    typedef ::xsd::cxx::tree::traits< modules_type, char > modules_traits;

    const modules_type&
    modules () const;

    modules_type&
    modules ();

    void
    modules (const modules_type& x);

    void
    modules (::std::auto_ptr< modules_type > p);

    // id
    // 
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::auto_ptr< id_type > p);

    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // Constructors.
    //
    general (const description_type&,
             const modules_type&,
             const id_type&,
             const name_type&);

    general (const description_type&,
             ::std::auto_ptr< modules_type >&,
             const id_type&,
             const name_type&);

    general (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    general (const general& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual general*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~general ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< description_type > description_;
    ::xsd::cxx::tree::one< modules_type > modules_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
  };

  class constants: public ::xml_schema::type
  {
    public:
    // constant
    // 
    typedef ::XMLCoupling::constant constant_type;
    typedef ::xsd::cxx::tree::sequence< constant_type > constant_sequence;
    typedef constant_sequence::iterator constant_iterator;
    typedef constant_sequence::const_iterator constant_const_iterator;
    typedef ::xsd::cxx::tree::traits< constant_type, char > constant_traits;

    const constant_sequence&
    constant () const;

    constant_sequence&
    constant ();

    void
    constant (const constant_sequence& s);

    // Constructors.
    //
    constants ();

    constants (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    constants (const constants& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual constants*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~constants ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    constant_sequence constant_;
  };

  class constant: public ::xml_schema::type
  {
    public:
    // id
    // 
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::auto_ptr< id_type > p);

    // value
    // 
    typedef ::xml_schema::double_ value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char, ::xsd::cxx::tree::schema_type::double_ > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    // Constructors.
    //
    constant (const id_type&,
              const value_type&);

    constant (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    constant (const constant& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual constant*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~constant ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class modules: public ::xml_schema::type
  {
    public:
    // source
    // 
    typedef ::XMLCoupling::source source_type;
    typedef ::xsd::cxx::tree::traits< source_type, char > source_traits;

    const source_type&
    source () const;

    source_type&
    source ();

    void
    source (const source_type& x);

    void
    source (::std::auto_ptr< source_type > p);

    // target
    // 
    typedef ::XMLCoupling::target target_type;
    typedef ::xsd::cxx::tree::traits< target_type, char > target_traits;

    const target_type&
    target () const;

    target_type&
    target ();

    void
    target (const target_type& x);

    void
    target (::std::auto_ptr< target_type > p);

    // Constructors.
    //
    modules (const source_type&,
             const target_type&);

    modules (::std::auto_ptr< source_type >&,
             ::std::auto_ptr< target_type >&);

    modules (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    modules (const modules& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual modules*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~modules ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< source_type > source_;
    ::xsd::cxx::tree::one< target_type > target_;
  };

  class source: public ::xml_schema::type
  {
    public:
    // id
    // 
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    source (const id_type&);

    source (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    source (const source& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual source*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~source ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class target: public ::xml_schema::type
  {
    public:
    // id
    // 
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    target (const id_type&);

    target (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    target (const target& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual target*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~target ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class volume: public ::xml_schema::type
  {
    public:
    // weakforms_volume
    // 
    typedef ::XMLCoupling::weakforms_volume weakforms_volume_type;
    typedef ::xsd::cxx::tree::traits< weakforms_volume_type, char > weakforms_volume_traits;

    const weakforms_volume_type&
    weakforms_volume () const;

    weakforms_volume_type&
    weakforms_volume ();

    void
    weakforms_volume (const weakforms_volume_type& x);

    void
    weakforms_volume (::std::auto_ptr< weakforms_volume_type > p);

    // Constructors.
    //
    volume (const weakforms_volume_type&);

    volume (::std::auto_ptr< weakforms_volume_type >&);

    volume (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    volume (const volume& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual volume*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~volume ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< weakforms_volume_type > weakforms_volume_;
  };

  class weakforms_volume: public ::xml_schema::type
  {
    public:
    // weakform_volume
    // 
    typedef ::XMLCoupling::weakform_volume weakform_volume_type;
    typedef ::xsd::cxx::tree::sequence< weakform_volume_type > weakform_volume_sequence;
    typedef weakform_volume_sequence::iterator weakform_volume_iterator;
    typedef weakform_volume_sequence::const_iterator weakform_volume_const_iterator;
    typedef ::xsd::cxx::tree::traits< weakform_volume_type, char > weakform_volume_traits;

    const weakform_volume_sequence&
    weakform_volume () const;

    weakform_volume_sequence&
    weakform_volume ();

    void
    weakform_volume (const weakform_volume_sequence& s);

    // Constructors.
    //
    weakforms_volume ();

    weakforms_volume (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    weakforms_volume (const weakforms_volume& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual weakforms_volume*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~weakforms_volume ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    weakform_volume_sequence weakform_volume_;
  };

  class weakform_surface: public ::xml_schema::type
  {
    public:
    // matrix_form
    // 
    typedef ::XMLCoupling::matrix_form matrix_form_type;
    typedef ::xsd::cxx::tree::sequence< matrix_form_type > matrix_form_sequence;
    typedef matrix_form_sequence::iterator matrix_form_iterator;
    typedef matrix_form_sequence::const_iterator matrix_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< matrix_form_type, char > matrix_form_traits;

    const matrix_form_sequence&
    matrix_form () const;

    matrix_form_sequence&
    matrix_form ();

    void
    matrix_form (const matrix_form_sequence& s);

    // vector_form
    // 
    typedef ::XMLCoupling::vector_form vector_form_type;
    typedef ::xsd::cxx::tree::sequence< vector_form_type > vector_form_sequence;
    typedef vector_form_sequence::iterator vector_form_iterator;
    typedef vector_form_sequence::const_iterator vector_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< vector_form_type, char > vector_form_traits;

    const vector_form_sequence&
    vector_form () const;

    vector_form_sequence&
    vector_form ();

    void
    vector_form (const vector_form_sequence& s);

    // couplingtype
    // 
    typedef ::xml_schema::string couplingtype_type;
    typedef ::xsd::cxx::tree::traits< couplingtype_type, char > couplingtype_traits;

    const couplingtype_type&
    couplingtype () const;

    couplingtype_type&
    couplingtype ();

    void
    couplingtype (const couplingtype_type& x);

    void
    couplingtype (::std::auto_ptr< couplingtype_type > p);

    // sourceanalysis
    // 
    typedef ::xml_schema::string sourceanalysis_type;
    typedef ::xsd::cxx::tree::traits< sourceanalysis_type, char > sourceanalysis_traits;

    const sourceanalysis_type&
    sourceanalysis () const;

    sourceanalysis_type&
    sourceanalysis ();

    void
    sourceanalysis (const sourceanalysis_type& x);

    void
    sourceanalysis (::std::auto_ptr< sourceanalysis_type > p);

    // targetanalysis
    // 
    typedef ::xml_schema::string targetanalysis_type;
    typedef ::xsd::cxx::tree::traits< targetanalysis_type, char > targetanalysis_traits;

    const targetanalysis_type&
    targetanalysis () const;

    targetanalysis_type&
    targetanalysis ();

    void
    targetanalysis (const targetanalysis_type& x);

    void
    targetanalysis (::std::auto_ptr< targetanalysis_type > p);

    // Constructors.
    //
    weakform_surface (const couplingtype_type&,
                      const sourceanalysis_type&,
                      const targetanalysis_type&);

    weakform_surface (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    weakform_surface (const weakform_surface& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual weakform_surface*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~weakform_surface ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    matrix_form_sequence matrix_form_;
    vector_form_sequence vector_form_;
    ::xsd::cxx::tree::one< couplingtype_type > couplingtype_;
    ::xsd::cxx::tree::one< sourceanalysis_type > sourceanalysis_;
    ::xsd::cxx::tree::one< targetanalysis_type > targetanalysis_;
  };

  class weakforms_surface: public ::xml_schema::type
  {
    public:
    // weakform_surface
    // 
    typedef ::XMLCoupling::weakform_surface weakform_surface_type;
    typedef ::xsd::cxx::tree::sequence< weakform_surface_type > weakform_surface_sequence;
    typedef weakform_surface_sequence::iterator weakform_surface_iterator;
    typedef weakform_surface_sequence::const_iterator weakform_surface_const_iterator;
    typedef ::xsd::cxx::tree::traits< weakform_surface_type, char > weakform_surface_traits;

    const weakform_surface_sequence&
    weakform_surface () const;

    weakform_surface_sequence&
    weakform_surface ();

    void
    weakform_surface (const weakform_surface_sequence& s);

    // Constructors.
    //
    weakforms_surface ();

    weakforms_surface (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    weakforms_surface (const weakforms_surface& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual weakforms_surface*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~weakforms_surface ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    weakform_surface_sequence weakform_surface_;
  };

  class weakform_volume: public ::xml_schema::type
  {
    public:
    // matrix_form
    // 
    typedef ::XMLCoupling::matrix_form matrix_form_type;
    typedef ::xsd::cxx::tree::sequence< matrix_form_type > matrix_form_sequence;
    typedef matrix_form_sequence::iterator matrix_form_iterator;
    typedef matrix_form_sequence::const_iterator matrix_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< matrix_form_type, char > matrix_form_traits;

    const matrix_form_sequence&
    matrix_form () const;

    matrix_form_sequence&
    matrix_form ();

    void
    matrix_form (const matrix_form_sequence& s);

    // vector_form
    // 
    typedef ::XMLCoupling::vector_form vector_form_type;
    typedef ::xsd::cxx::tree::sequence< vector_form_type > vector_form_sequence;
    typedef vector_form_sequence::iterator vector_form_iterator;
    typedef vector_form_sequence::const_iterator vector_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< vector_form_type, char > vector_form_traits;

    const vector_form_sequence&
    vector_form () const;

    vector_form_sequence&
    vector_form ();

    void
    vector_form (const vector_form_sequence& s);

    // couplingtype
    // 
    typedef ::xml_schema::string couplingtype_type;
    typedef ::xsd::cxx::tree::traits< couplingtype_type, char > couplingtype_traits;

    const couplingtype_type&
    couplingtype () const;

    couplingtype_type&
    couplingtype ();

    void
    couplingtype (const couplingtype_type& x);

    void
    couplingtype (::std::auto_ptr< couplingtype_type > p);

    // sourceanalysis
    // 
    typedef ::xml_schema::string sourceanalysis_type;
    typedef ::xsd::cxx::tree::traits< sourceanalysis_type, char > sourceanalysis_traits;

    const sourceanalysis_type&
    sourceanalysis () const;

    sourceanalysis_type&
    sourceanalysis ();

    void
    sourceanalysis (const sourceanalysis_type& x);

    void
    sourceanalysis (::std::auto_ptr< sourceanalysis_type > p);

    // targetanalysis
    // 
    typedef ::xml_schema::string targetanalysis_type;
    typedef ::xsd::cxx::tree::traits< targetanalysis_type, char > targetanalysis_traits;

    const targetanalysis_type&
    targetanalysis () const;

    targetanalysis_type&
    targetanalysis ();

    void
    targetanalysis (const targetanalysis_type& x);

    void
    targetanalysis (::std::auto_ptr< targetanalysis_type > p);

    // Constructors.
    //
    weakform_volume (const couplingtype_type&,
                     const sourceanalysis_type&,
                     const targetanalysis_type&);

    weakform_volume (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    weakform_volume (const weakform_volume& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual weakform_volume*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~weakform_volume ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    matrix_form_sequence matrix_form_;
    vector_form_sequence vector_form_;
    ::xsd::cxx::tree::one< couplingtype_type > couplingtype_;
    ::xsd::cxx::tree::one< sourceanalysis_type > sourceanalysis_;
    ::xsd::cxx::tree::one< targetanalysis_type > targetanalysis_;
  };

  class matrix_form: public ::xml_schema::type
  {
    public:
    // i
    // 
    typedef ::xml_schema::integer i_type;
    typedef ::xsd::cxx::tree::traits< i_type, char > i_traits;

    const i_type&
    i () const;

    i_type&
    i ();

    void
    i (const i_type& x);

    // j
    // 
    typedef ::xml_schema::integer j_type;
    typedef ::xsd::cxx::tree::traits< j_type, char > j_traits;

    const j_type&
    j () const;

    j_type&
    j ();

    void
    j (const j_type& x);

    // axi_linear
    // 
    typedef ::xml_schema::string axi_linear_type;
    typedef ::xsd::cxx::tree::traits< axi_linear_type, char > axi_linear_traits;

    const axi_linear_type&
    axi_linear () const;

    axi_linear_type&
    axi_linear ();

    void
    axi_linear (const axi_linear_type& x);

    void
    axi_linear (::std::auto_ptr< axi_linear_type > p);

    // planar_linear
    // 
    typedef ::xml_schema::string planar_linear_type;
    typedef ::xsd::cxx::tree::traits< planar_linear_type, char > planar_linear_traits;

    const planar_linear_type&
    planar_linear () const;

    planar_linear_type&
    planar_linear ();

    void
    planar_linear (const planar_linear_type& x);

    void
    planar_linear (::std::auto_ptr< planar_linear_type > p);

    // axi_newton
    // 
    typedef ::xml_schema::string axi_newton_type;
    typedef ::xsd::cxx::tree::traits< axi_newton_type, char > axi_newton_traits;

    const axi_newton_type&
    axi_newton () const;

    axi_newton_type&
    axi_newton ();

    void
    axi_newton (const axi_newton_type& x);

    void
    axi_newton (::std::auto_ptr< axi_newton_type > p);

    // planar_newton
    // 
    typedef ::xml_schema::string planar_newton_type;
    typedef ::xsd::cxx::tree::traits< planar_newton_type, char > planar_newton_traits;

    const planar_newton_type&
    planar_newton () const;

    planar_newton_type&
    planar_newton ();

    void
    planar_newton (const planar_newton_type& x);

    void
    planar_newton (::std::auto_ptr< planar_newton_type > p);

    // Constructors.
    //
    matrix_form (const i_type&,
                 const j_type&,
                 const axi_linear_type&,
                 const planar_linear_type&,
                 const axi_newton_type&,
                 const planar_newton_type&);

    matrix_form (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    matrix_form (const matrix_form& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual matrix_form*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~matrix_form ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< i_type > i_;
    ::xsd::cxx::tree::one< j_type > j_;
    ::xsd::cxx::tree::one< axi_linear_type > axi_linear_;
    ::xsd::cxx::tree::one< planar_linear_type > planar_linear_;
    ::xsd::cxx::tree::one< axi_newton_type > axi_newton_;
    ::xsd::cxx::tree::one< planar_newton_type > planar_newton_;
  };

  class vector_form: public ::xml_schema::type
  {
    public:
    // i
    // 
    typedef ::xml_schema::integer i_type;
    typedef ::xsd::cxx::tree::traits< i_type, char > i_traits;

    const i_type&
    i () const;

    i_type&
    i ();

    void
    i (const i_type& x);

    // j
    // 
    typedef ::xml_schema::integer j_type;
    typedef ::xsd::cxx::tree::traits< j_type, char > j_traits;

    const j_type&
    j () const;

    j_type&
    j ();

    void
    j (const j_type& x);

    // axi_linear
    // 
    typedef ::xml_schema::string axi_linear_type;
    typedef ::xsd::cxx::tree::traits< axi_linear_type, char > axi_linear_traits;

    const axi_linear_type&
    axi_linear () const;

    axi_linear_type&
    axi_linear ();

    void
    axi_linear (const axi_linear_type& x);

    void
    axi_linear (::std::auto_ptr< axi_linear_type > p);

    // planar_linear
    // 
    typedef ::xml_schema::string planar_linear_type;
    typedef ::xsd::cxx::tree::traits< planar_linear_type, char > planar_linear_traits;

    const planar_linear_type&
    planar_linear () const;

    planar_linear_type&
    planar_linear ();

    void
    planar_linear (const planar_linear_type& x);

    void
    planar_linear (::std::auto_ptr< planar_linear_type > p);

    // axi_newton
    // 
    typedef ::xml_schema::string axi_newton_type;
    typedef ::xsd::cxx::tree::traits< axi_newton_type, char > axi_newton_traits;

    const axi_newton_type&
    axi_newton () const;

    axi_newton_type&
    axi_newton ();

    void
    axi_newton (const axi_newton_type& x);

    void
    axi_newton (::std::auto_ptr< axi_newton_type > p);

    // planar_newton
    // 
    typedef ::xml_schema::string planar_newton_type;
    typedef ::xsd::cxx::tree::traits< planar_newton_type, char > planar_newton_traits;

    const planar_newton_type&
    planar_newton () const;

    planar_newton_type&
    planar_newton ();

    void
    planar_newton (const planar_newton_type& x);

    void
    planar_newton (::std::auto_ptr< planar_newton_type > p);

    // Constructors.
    //
    vector_form (const i_type&,
                 const j_type&,
                 const axi_linear_type&,
                 const planar_linear_type&,
                 const axi_newton_type&,
                 const planar_newton_type&);

    vector_form (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    vector_form (const vector_form& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual vector_form*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~vector_form ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< i_type > i_;
    ::xsd::cxx::tree::one< j_type > j_;
    ::xsd::cxx::tree::one< axi_linear_type > axi_linear_;
    ::xsd::cxx::tree::one< planar_linear_type > planar_linear_;
    ::xsd::cxx::tree::one< axi_newton_type > axi_newton_;
    ::xsd::cxx::tree::one< planar_newton_type > planar_newton_;
  };
}

#include <iosfwd>

namespace XMLCoupling
{
  ::std::ostream&
  operator<< (::std::ostream&, const coupling&);

  ::std::ostream&
  operator<< (::std::ostream&, const general&);

  ::std::ostream&
  operator<< (::std::ostream&, const constants&);

  ::std::ostream&
  operator<< (::std::ostream&, const constant&);

  ::std::ostream&
  operator<< (::std::ostream&, const modules&);

  ::std::ostream&
  operator<< (::std::ostream&, const source&);

  ::std::ostream&
  operator<< (::std::ostream&, const target&);

  ::std::ostream&
  operator<< (::std::ostream&, const volume&);

  ::std::ostream&
  operator<< (::std::ostream&, const weakforms_volume&);

  ::std::ostream&
  operator<< (::std::ostream&, const weakform_surface&);

  ::std::ostream&
  operator<< (::std::ostream&, const weakforms_surface&);

  ::std::ostream&
  operator<< (::std::ostream&, const weakform_volume&);

  ::std::ostream&
  operator<< (::std::ostream&, const matrix_form&);

  ::std::ostream&
  operator<< (::std::ostream&, const vector_form&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace XMLCoupling
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::XMLCoupling::coupling >
  coupling_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace XMLCoupling
{
  // Serialize to std::ostream.
  //

  void
  coupling_ (::std::ostream& os,
             const ::XMLCoupling::coupling& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  coupling_ (::std::ostream& os,
             const ::XMLCoupling::coupling& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  coupling_ (::std::ostream& os,
             const ::XMLCoupling::coupling& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  coupling_ (::xercesc::XMLFormatTarget& ft,
             const ::XMLCoupling::coupling& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  coupling_ (::xercesc::XMLFormatTarget& ft,
             const ::XMLCoupling::coupling& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  coupling_ (::xercesc::XMLFormatTarget& ft,
             const ::XMLCoupling::coupling& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  coupling_ (::xercesc::DOMDocument& d,
             const ::XMLCoupling::coupling& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  coupling_ (const ::XMLCoupling::coupling& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const coupling&);

  void
  operator<< (::xercesc::DOMElement&, const general&);

  void
  operator<< (::xercesc::DOMElement&, const constants&);

  void
  operator<< (::xercesc::DOMElement&, const constant&);

  void
  operator<< (::xercesc::DOMElement&, const modules&);

  void
  operator<< (::xercesc::DOMElement&, const source&);

  void
  operator<< (::xercesc::DOMElement&, const target&);

  void
  operator<< (::xercesc::DOMElement&, const volume&);

  void
  operator<< (::xercesc::DOMElement&, const weakforms_volume&);

  void
  operator<< (::xercesc::DOMElement&, const weakform_surface&);

  void
  operator<< (::xercesc::DOMElement&, const weakforms_surface&);

  void
  operator<< (::xercesc::DOMElement&, const weakform_volume&);

  void
  operator<< (::xercesc::DOMElement&, const matrix_form&);

  void
  operator<< (::xercesc::DOMElement&, const vector_form&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX______RESOURCES_XSD_COUPLING_XML_H
