// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "material_xml.h"

namespace XMLMaterial
{
  // material
  // 

  const material::general_type& material::
  general () const
  {
    return this->general_.get ();
  }

  material::general_type& material::
  general ()
  {
    return this->general_.get ();
  }

  void material::
  general (const general_type& x)
  {
    this->general_.set (x);
  }

  void material::
  general (::std::auto_ptr< general_type > x)
  {
    this->general_.set (x);
  }

  const material::properties_type& material::
  properties () const
  {
    return this->properties_.get ();
  }

  material::properties_type& material::
  properties ()
  {
    return this->properties_.get ();
  }

  void material::
  properties (const properties_type& x)
  {
    this->properties_.set (x);
  }

  void material::
  properties (::std::auto_ptr< properties_type > x)
  {
    this->properties_.set (x);
  }


  // general
  // 

  const general::name_type& general::
  name () const
  {
    return this->name_.get ();
  }

  general::name_type& general::
  name ()
  {
    return this->name_.get ();
  }

  void general::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void general::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const general::description_optional& general::
  description () const
  {
    return this->description_;
  }

  general::description_optional& general::
  description ()
  {
    return this->description_;
  }

  void general::
  description (const description_type& x)
  {
    this->description_.set (x);
  }

  void general::
  description (const description_optional& x)
  {
    this->description_ = x;
  }

  void general::
  description (::std::auto_ptr< description_type > x)
  {
    this->description_.set (x);
  }


  // properties
  // 

  const properties::property_sequence& properties::
  property () const
  {
    return this->property_;
  }

  properties::property_sequence& properties::
  property ()
  {
    return this->property_;
  }

  void properties::
  property (const property_sequence& s)
  {
    this->property_ = s;
  }


  // property
  // 

  const property::constant_optional& property::
  constant () const
  {
    return this->constant_;
  }

  property::constant_optional& property::
  constant ()
  {
    return this->constant_;
  }

  void property::
  constant (const constant_type& x)
  {
    this->constant_.set (x);
  }

  void property::
  constant (const constant_optional& x)
  {
    this->constant_ = x;
  }

  void property::
  constant (::std::auto_ptr< constant_type > x)
  {
    this->constant_.set (x);
  }

  const property::dependence_optional& property::
  dependence () const
  {
    return this->dependence_;
  }

  property::dependence_optional& property::
  dependence ()
  {
    return this->dependence_;
  }

  void property::
  dependence (const dependence_type& x)
  {
    this->dependence_.set (x);
  }

  void property::
  dependence (const dependence_optional& x)
  {
    this->dependence_ = x;
  }

  void property::
  dependence (::std::auto_ptr< dependence_type > x)
  {
    this->dependence_.set (x);
  }

  const property::id_type& property::
  id () const
  {
    return this->id_.get ();
  }

  property::id_type& property::
  id ()
  {
    return this->id_.get ();
  }

  void property::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void property::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }

  const property::name_type& property::
  name () const
  {
    return this->name_.get ();
  }

  property::name_type& property::
  name ()
  {
    return this->name_.get ();
  }

  void property::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void property::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const property::shortname_type& property::
  shortname () const
  {
    return this->shortname_.get ();
  }

  property::shortname_type& property::
  shortname ()
  {
    return this->shortname_.get ();
  }

  void property::
  shortname (const shortname_type& x)
  {
    this->shortname_.set (x);
  }

  void property::
  shortname (::std::auto_ptr< shortname_type > x)
  {
    this->shortname_.set (x);
  }

  const property::unit_type& property::
  unit () const
  {
    return this->unit_.get ();
  }

  property::unit_type& property::
  unit ()
  {
    return this->unit_.get ();
  }

  void property::
  unit (const unit_type& x)
  {
    this->unit_.set (x);
  }

  void property::
  unit (::std::auto_ptr< unit_type > x)
  {
    this->unit_.set (x);
  }

  const property::dependence_shortname_type& property::
  dependence_shortname () const
  {
    return this->dependence_shortname_.get ();
  }

  property::dependence_shortname_type& property::
  dependence_shortname ()
  {
    return this->dependence_shortname_.get ();
  }

  void property::
  dependence_shortname (const dependence_shortname_type& x)
  {
    this->dependence_shortname_.set (x);
  }

  void property::
  dependence_shortname (::std::auto_ptr< dependence_shortname_type > x)
  {
    this->dependence_shortname_.set (x);
  }

  const property::dependence_unit_type& property::
  dependence_unit () const
  {
    return this->dependence_unit_.get ();
  }

  property::dependence_unit_type& property::
  dependence_unit ()
  {
    return this->dependence_unit_.get ();
  }

  void property::
  dependence_unit (const dependence_unit_type& x)
  {
    this->dependence_unit_.set (x);
  }

  void property::
  dependence_unit (::std::auto_ptr< dependence_unit_type > x)
  {
    this->dependence_unit_.set (x);
  }

  const property::source_type& property::
  source () const
  {
    return this->source_.get ();
  }

  property::source_type& property::
  source ()
  {
    return this->source_.get ();
  }

  void property::
  source (const source_type& x)
  {
    this->source_.set (x);
  }

  void property::
  source (::std::auto_ptr< source_type > x)
  {
    this->source_.set (x);
  }


  // constant
  // 

  const constant::value_type& constant::
  value () const
  {
    return this->value_.get ();
  }

  constant::value_type& constant::
  value ()
  {
    return this->value_.get ();
  }

  void constant::
  value (const value_type& x)
  {
    this->value_.set (x);
  }


  // dependence
  // 

  const dependence::table_optional& dependence::
  table () const
  {
    return this->table_;
  }

  dependence::table_optional& dependence::
  table ()
  {
    return this->table_;
  }

  void dependence::
  table (const table_type& x)
  {
    this->table_.set (x);
  }

  void dependence::
  table (const table_optional& x)
  {
    this->table_ = x;
  }

  void dependence::
  table (::std::auto_ptr< table_type > x)
  {
    this->table_.set (x);
  }

  const dependence::function_optional& dependence::
  function () const
  {
    return this->function_;
  }

  dependence::function_optional& dependence::
  function ()
  {
    return this->function_;
  }

  void dependence::
  function (const function_type& x)
  {
    this->function_.set (x);
  }

  void dependence::
  function (const function_optional& x)
  {
    this->function_ = x;
  }

  void dependence::
  function (::std::auto_ptr< function_type > x)
  {
    this->function_.set (x);
  }


  // table
  // 

  const table::keys_type& table::
  keys () const
  {
    return this->keys_.get ();
  }

  table::keys_type& table::
  keys ()
  {
    return this->keys_.get ();
  }

  void table::
  keys (const keys_type& x)
  {
    this->keys_.set (x);
  }

  void table::
  keys (::std::auto_ptr< keys_type > x)
  {
    this->keys_.set (x);
  }

  const table::values_type& table::
  values () const
  {
    return this->values_.get ();
  }

  table::values_type& table::
  values ()
  {
    return this->values_.get ();
  }

  void table::
  values (const values_type& x)
  {
    this->values_.set (x);
  }

  void table::
  values (::std::auto_ptr< values_type > x)
  {
    this->values_.set (x);
  }


  // function
  // 

  const function::body_type& function::
  body () const
  {
    return this->body_.get ();
  }

  function::body_type& function::
  body ()
  {
    return this->body_.get ();
  }

  void function::
  body (const body_type& x)
  {
    this->body_.set (x);
  }

  void function::
  body (::std::auto_ptr< body_type > x)
  {
    this->body_.set (x);
  }

  const function::interval_from_type& function::
  interval_from () const
  {
    return this->interval_from_.get ();
  }

  function::interval_from_type& function::
  interval_from ()
  {
    return this->interval_from_.get ();
  }

  void function::
  interval_from (const interval_from_type& x)
  {
    this->interval_from_.set (x);
  }

  const function::interval_to_type& function::
  interval_to () const
  {
    return this->interval_to_.get ();
  }

  function::interval_to_type& function::
  interval_to ()
  {
    return this->interval_to_.get ();
  }

  void function::
  interval_to (const interval_to_type& x)
  {
    this->interval_to_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace XMLMaterial
{
  // material
  //

  material::
  material (const general_type& general,
            const properties_type& properties)
  : ::xml_schema::type (),
    general_ (general, ::xml_schema::flags (), this),
    properties_ (properties, ::xml_schema::flags (), this)
  {
  }

  material::
  material (::std::auto_ptr< general_type >& general,
            ::std::auto_ptr< properties_type >& properties)
  : ::xml_schema::type (),
    general_ (general, ::xml_schema::flags (), this),
    properties_ (properties, ::xml_schema::flags (), this)
  {
  }

  material::
  material (const material& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    general_ (x.general_, f, this),
    properties_ (x.properties_, f, this)
  {
  }

  material::
  material (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    general_ (f, this),
    properties_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void material::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // general
      //
      if (n.name () == "general" && n.namespace_ () == "XMLMaterial")
      {
        ::std::auto_ptr< general_type > r (
          general_traits::create (i, f, this));

        if (!general_.present ())
        {
          this->general_.set (r);
          continue;
        }
      }

      // properties
      //
      if (n.name () == "properties" && n.namespace_ () == "XMLMaterial")
      {
        ::std::auto_ptr< properties_type > r (
          properties_traits::create (i, f, this));

        if (!properties_.present ())
        {
          this->properties_.set (r);
          continue;
        }
      }

      break;
    }

    if (!general_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "general",
        "XMLMaterial");
    }

    if (!properties_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "properties",
        "XMLMaterial");
    }
  }

  material* material::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class material (*this, f, c);
  }

  material::
  ~material ()
  {
  }

  // general
  //

  general::
  general (const name_type& name)
  : ::xml_schema::type (),
    name_ (name, ::xml_schema::flags (), this),
    description_ (::xml_schema::flags (), this)
  {
  }

  general::
  general (const general& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    description_ (x.description_, f, this)
  {
  }

  general::
  general (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (f, this),
    description_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void general::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name_.set (r);
        continue;
      }

      if (n.name () == "description" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< description_type > r (
          description_traits::create (i, f, this));

        this->description_.set (r);
        continue;
      }
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "name",
        "");
    }
  }

  general* general::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class general (*this, f, c);
  }

  general::
  ~general ()
  {
  }

  // properties
  //

  properties::
  properties ()
  : ::xml_schema::type (),
    property_ (::xml_schema::flags (), this)
  {
  }

  properties::
  properties (const properties& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    property_ (x.property_, f, this)
  {
  }

  properties::
  properties (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    property_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void properties::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // property
      //
      if (n.name () == "property" && n.namespace_ () == "XMLMaterial")
      {
        ::std::auto_ptr< property_type > r (
          property_traits::create (i, f, this));

        this->property_.push_back (r);
        continue;
      }

      break;
    }
  }

  properties* properties::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class properties (*this, f, c);
  }

  properties::
  ~properties ()
  {
  }

  // property
  //

  property::
  property (const id_type& id,
            const name_type& name,
            const shortname_type& shortname,
            const unit_type& unit,
            const dependence_shortname_type& dependence_shortname,
            const dependence_unit_type& dependence_unit,
            const source_type& source)
  : ::xml_schema::type (),
    constant_ (::xml_schema::flags (), this),
    dependence_ (::xml_schema::flags (), this),
    id_ (id, ::xml_schema::flags (), this),
    name_ (name, ::xml_schema::flags (), this),
    shortname_ (shortname, ::xml_schema::flags (), this),
    unit_ (unit, ::xml_schema::flags (), this),
    dependence_shortname_ (dependence_shortname, ::xml_schema::flags (), this),
    dependence_unit_ (dependence_unit, ::xml_schema::flags (), this),
    source_ (source, ::xml_schema::flags (), this)
  {
  }

  property::
  property (const property& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    constant_ (x.constant_, f, this),
    dependence_ (x.dependence_, f, this),
    id_ (x.id_, f, this),
    name_ (x.name_, f, this),
    shortname_ (x.shortname_, f, this),
    unit_ (x.unit_, f, this),
    dependence_shortname_ (x.dependence_shortname_, f, this),
    dependence_unit_ (x.dependence_unit_, f, this),
    source_ (x.source_, f, this)
  {
  }

  property::
  property (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    constant_ (f, this),
    dependence_ (f, this),
    id_ (f, this),
    name_ (f, this),
    shortname_ (f, this),
    unit_ (f, this),
    dependence_shortname_ (f, this),
    dependence_unit_ (f, this),
    source_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void property::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // constant
      //
      if (n.name () == "constant" && n.namespace_ () == "XMLMaterial")
      {
        ::std::auto_ptr< constant_type > r (
          constant_traits::create (i, f, this));

        if (!this->constant_)
        {
          this->constant_.set (r);
          continue;
        }
      }

      // dependence
      //
      if (n.name () == "dependence" && n.namespace_ () == "XMLMaterial")
      {
        ::std::auto_ptr< dependence_type > r (
          dependence_traits::create (i, f, this));

        if (!this->dependence_)
        {
          this->dependence_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id_.set (r);
        continue;
      }

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name_.set (r);
        continue;
      }

      if (n.name () == "shortname" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< shortname_type > r (
          shortname_traits::create (i, f, this));

        this->shortname_.set (r);
        continue;
      }

      if (n.name () == "unit" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< unit_type > r (
          unit_traits::create (i, f, this));

        this->unit_.set (r);
        continue;
      }

      if (n.name () == "dependence_shortname" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< dependence_shortname_type > r (
          dependence_shortname_traits::create (i, f, this));

        this->dependence_shortname_.set (r);
        continue;
      }

      if (n.name () == "dependence_unit" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< dependence_unit_type > r (
          dependence_unit_traits::create (i, f, this));

        this->dependence_unit_.set (r);
        continue;
      }

      if (n.name () == "source" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< source_type > r (
          source_traits::create (i, f, this));

        this->source_.set (r);
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "name",
        "");
    }

    if (!shortname_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "shortname",
        "");
    }

    if (!unit_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "unit",
        "");
    }

    if (!dependence_shortname_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "dependence_shortname",
        "");
    }

    if (!dependence_unit_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "dependence_unit",
        "");
    }

    if (!source_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "source",
        "");
    }
  }

  property* property::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class property (*this, f, c);
  }

  property::
  ~property ()
  {
  }

  // constant
  //

  constant::
  constant (const value_type& value)
  : ::xml_schema::type (),
    value_ (value, ::xml_schema::flags (), this)
  {
  }

  constant::
  constant (const constant& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    value_ (x.value_, f, this)
  {
  }

  constant::
  constant (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void constant::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    if (!value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "value",
        "");
    }
  }

  constant* constant::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class constant (*this, f, c);
  }

  constant::
  ~constant ()
  {
  }

  // dependence
  //

  dependence::
  dependence ()
  : ::xml_schema::type (),
    table_ (::xml_schema::flags (), this),
    function_ (::xml_schema::flags (), this)
  {
  }

  dependence::
  dependence (const dependence& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    table_ (x.table_, f, this),
    function_ (x.function_, f, this)
  {
  }

  dependence::
  dependence (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    table_ (f, this),
    function_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void dependence::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // table
      //
      if (n.name () == "table" && n.namespace_ () == "XMLMaterial")
      {
        ::std::auto_ptr< table_type > r (
          table_traits::create (i, f, this));

        if (!this->table_)
        {
          this->table_.set (r);
          continue;
        }
      }

      // function
      //
      if (n.name () == "function" && n.namespace_ () == "XMLMaterial")
      {
        ::std::auto_ptr< function_type > r (
          function_traits::create (i, f, this));

        if (!this->function_)
        {
          this->function_.set (r);
          continue;
        }
      }

      break;
    }
  }

  dependence* dependence::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class dependence (*this, f, c);
  }

  dependence::
  ~dependence ()
  {
  }

  // table
  //

  table::
  table (const keys_type& keys,
         const values_type& values)
  : ::xml_schema::type (),
    keys_ (keys, ::xml_schema::flags (), this),
    values_ (values, ::xml_schema::flags (), this)
  {
  }

  table::
  table (const table& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    keys_ (x.keys_, f, this),
    values_ (x.values_, f, this)
  {
  }

  table::
  table (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    keys_ (f, this),
    values_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void table::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "keys" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< keys_type > r (
          keys_traits::create (i, f, this));

        this->keys_.set (r);
        continue;
      }

      if (n.name () == "values" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< values_type > r (
          values_traits::create (i, f, this));

        this->values_.set (r);
        continue;
      }
    }

    if (!keys_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "keys",
        "");
    }

    if (!values_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "values",
        "");
    }
  }

  table* table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class table (*this, f, c);
  }

  table::
  ~table ()
  {
  }

  // function
  //

  function::
  function (const body_type& body,
            const interval_from_type& interval_from,
            const interval_to_type& interval_to)
  : ::xml_schema::type (),
    body_ (body, ::xml_schema::flags (), this),
    interval_from_ (interval_from, ::xml_schema::flags (), this),
    interval_to_ (interval_to, ::xml_schema::flags (), this)
  {
  }

  function::
  function (const function& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    body_ (x.body_, f, this),
    interval_from_ (x.interval_from_, f, this),
    interval_to_ (x.interval_to_, f, this)
  {
  }

  function::
  function (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    body_ (f, this),
    interval_from_ (f, this),
    interval_to_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void function::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "body" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< body_type > r (
          body_traits::create (i, f, this));

        this->body_.set (r);
        continue;
      }

      if (n.name () == "interval_from" && n.namespace_ ().empty ())
      {
        this->interval_from_.set (interval_from_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "interval_to" && n.namespace_ ().empty ())
      {
        this->interval_to_.set (interval_to_traits::create (i, f, this));
        continue;
      }
    }

    if (!body_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "body",
        "");
    }

    if (!interval_from_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "interval_from",
        "");
    }

    if (!interval_to_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "interval_to",
        "");
    }
  }

  function* function::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class function (*this, f, c);
  }

  function::
  ~function ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace XMLMaterial
{
  ::std::ostream&
  operator<< (::std::ostream& o, const material& i)
  {
    o << ::std::endl << "general: " << i.general ();
    o << ::std::endl << "properties: " << i.properties ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const general& i)
  {
    o << ::std::endl << "name: " << i.name ();
    if (i.description ())
    {
      o << ::std::endl << "description: " << *i.description ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const properties& i)
  {
    for (properties::property_const_iterator
         b (i.property ().begin ()), e (i.property ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "property: " << *b;
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const property& i)
  {
    if (i.constant ())
    {
      o << ::std::endl << "constant: " << *i.constant ();
    }

    if (i.dependence ())
    {
      o << ::std::endl << "dependence: " << *i.dependence ();
    }

    o << ::std::endl << "id: " << i.id ();
    o << ::std::endl << "name: " << i.name ();
    o << ::std::endl << "shortname: " << i.shortname ();
    o << ::std::endl << "unit: " << i.unit ();
    o << ::std::endl << "dependence_shortname: " << i.dependence_shortname ();
    o << ::std::endl << "dependence_unit: " << i.dependence_unit ();
    o << ::std::endl << "source: " << i.source ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const constant& i)
  {
    o << ::std::endl << "value: " << i.value ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const dependence& i)
  {
    if (i.table ())
    {
      o << ::std::endl << "table: " << *i.table ();
    }

    if (i.function ())
    {
      o << ::std::endl << "function: " << *i.function ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const table& i)
  {
    o << ::std::endl << "keys: " << i.keys ();
    o << ::std::endl << "values: " << i.values ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const function& i)
  {
    o << ::std::endl << "body: " << i.body ();
    o << ::std::endl << "interval_from: " << i.interval_from ();
    o << ::std::endl << "interval_to: " << i.interval_to ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace XMLMaterial
{
  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::XMLMaterial::material > r (
      ::XMLMaterial::material_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLMaterial::material > r (
      ::XMLMaterial::material_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLMaterial::material > r (
      ::XMLMaterial::material_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLMaterial::material_ (isrc, f, p);
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLMaterial::material_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLMaterial::material_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLMaterial::material_ (isrc, f, p);
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLMaterial::material_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLMaterial::material_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::XMLMaterial::material > r (
      ::XMLMaterial::material_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLMaterial::material > r (
      ::XMLMaterial::material_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLMaterial::material > r (
      ::XMLMaterial::material_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::XMLMaterial::material > r (
        ::XMLMaterial::material_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "material" &&
        n.namespace_ () == "XMLMaterial")
    {
      ::std::auto_ptr< ::XMLMaterial::material > r (
        ::xsd::cxx::tree::traits< ::XMLMaterial::material, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "material",
      "XMLMaterial");
  }

  ::std::auto_ptr< ::XMLMaterial::material >
  material_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "material" &&
        n.namespace_ () == "XMLMaterial")
    {
      ::std::auto_ptr< ::XMLMaterial::material > r (
        ::xsd::cxx::tree::traits< ::XMLMaterial::material, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "material",
      "XMLMaterial");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace XMLMaterial
{
  void
  material_ (::std::ostream& o,
             const ::XMLMaterial::material& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLMaterial::material_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  material_ (::std::ostream& o,
             const ::XMLMaterial::material& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLMaterial::material_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  material_ (::std::ostream& o,
             const ::XMLMaterial::material& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLMaterial::material_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  material_ (::xercesc::XMLFormatTarget& t,
             const ::XMLMaterial::material& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLMaterial::material_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  material_ (::xercesc::XMLFormatTarget& t,
             const ::XMLMaterial::material& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLMaterial::material_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  material_ (::xercesc::XMLFormatTarget& t,
             const ::XMLMaterial::material& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLMaterial::material_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  material_ (::xercesc::DOMDocument& d,
             const ::XMLMaterial::material& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "material" &&
        n.namespace_ () == "XMLMaterial")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "material",
        "XMLMaterial");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  material_ (const ::XMLMaterial::material& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "material",
        "XMLMaterial",
        m, f));

    ::XMLMaterial::material_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const material& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // general
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "general",
          "XMLMaterial",
          e));

      s << i.general ();
    }

    // properties
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "properties",
          "XMLMaterial",
          e));

      s << i.properties ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const general& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << i.name ();
    }

    // description
    //
    if (i.description ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "description",
          e));

      a << *i.description ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const properties& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // property
    //
    for (properties::property_const_iterator
         b (i.property ().begin ()), n (i.property ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "property",
          "XMLMaterial",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const property& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // constant
    //
    if (i.constant ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "constant",
          "XMLMaterial",
          e));

      s << *i.constant ();
    }

    // dependence
    //
    if (i.dependence ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "dependence",
          "XMLMaterial",
          e));

      s << *i.dependence ();
    }

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << i.name ();
    }

    // shortname
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "shortname",
          e));

      a << i.shortname ();
    }

    // unit
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "unit",
          e));

      a << i.unit ();
    }

    // dependence_shortname
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "dependence_shortname",
          e));

      a << i.dependence_shortname ();
    }

    // dependence_unit
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "dependence_unit",
          e));

      a << i.dependence_unit ();
    }

    // source
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "source",
          e));

      a << i.source ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const constant& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << ::xml_schema::as_double(i.value ());
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const dependence& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // table
    //
    if (i.table ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "table",
          "XMLMaterial",
          e));

      s << *i.table ();
    }

    // function
    //
    if (i.function ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "function",
          "XMLMaterial",
          e));

      s << *i.function ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // keys
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "keys",
          e));

      a << i.keys ();
    }

    // values
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "values",
          e));

      a << i.values ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const function& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // body
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "body",
          e));

      a << i.body ();
    }

    // interval_from
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "interval_from",
          e));

      a << ::xml_schema::as_double(i.interval_from ());
    }

    // interval_to
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "interval_to",
          e));

      a << ::xml_schema::as_double(i.interval_to ());
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

