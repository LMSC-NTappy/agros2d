// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "agros2d_structure_xml.h"

namespace XMLStructure
{
  // structure
  // 

  const structure::element_data_sequence& structure::
  element_data () const
  {
    return this->element_data_;
  }

  structure::element_data_sequence& structure::
  element_data ()
  {
    return this->element_data_;
  }

  void structure::
  element_data (const element_data_sequence& s)
  {
    this->element_data_ = s;
  }


  // element_data
  // 

  const element_data::field_id_type& element_data::
  field_id () const
  {
    return this->field_id_.get ();
  }

  element_data::field_id_type& element_data::
  field_id ()
  {
    return this->field_id_.get ();
  }

  void element_data::
  field_id (const field_id_type& x)
  {
    this->field_id_.set (x);
  }

  void element_data::
  field_id (::std::auto_ptr< field_id_type > x)
  {
    this->field_id_.set (x);
  }

  const element_data::time_step_type& element_data::
  time_step () const
  {
    return this->time_step_.get ();
  }

  element_data::time_step_type& element_data::
  time_step ()
  {
    return this->time_step_.get ();
  }

  void element_data::
  time_step (const time_step_type& x)
  {
    this->time_step_.set (x);
  }

  const element_data::adaptivity_step_type& element_data::
  adaptivity_step () const
  {
    return this->adaptivity_step_.get ();
  }

  element_data::adaptivity_step_type& element_data::
  adaptivity_step ()
  {
    return this->adaptivity_step_.get ();
  }

  void element_data::
  adaptivity_step (const adaptivity_step_type& x)
  {
    this->adaptivity_step_.set (x);
  }

  const element_data::solution_type_type& element_data::
  solution_type () const
  {
    return this->solution_type_.get ();
  }

  element_data::solution_type_type& element_data::
  solution_type ()
  {
    return this->solution_type_.get ();
  }

  void element_data::
  solution_type (const solution_type_type& x)
  {
    this->solution_type_.set (x);
  }

  void element_data::
  solution_type (::std::auto_ptr< solution_type_type > x)
  {
    this->solution_type_.set (x);
  }

  const element_data::time_step_length_optional& element_data::
  time_step_length () const
  {
    return this->time_step_length_;
  }

  element_data::time_step_length_optional& element_data::
  time_step_length ()
  {
    return this->time_step_length_;
  }

  void element_data::
  time_step_length (const time_step_length_type& x)
  {
    this->time_step_length_.set (x);
  }

  void element_data::
  time_step_length (const time_step_length_optional& x)
  {
    this->time_step_length_ = x;
  }

  const element_data::adaptivity_error_optional& element_data::
  adaptivity_error () const
  {
    return this->adaptivity_error_;
  }

  element_data::adaptivity_error_optional& element_data::
  adaptivity_error ()
  {
    return this->adaptivity_error_;
  }

  void element_data::
  adaptivity_error (const adaptivity_error_type& x)
  {
    this->adaptivity_error_.set (x);
  }

  void element_data::
  adaptivity_error (const adaptivity_error_optional& x)
  {
    this->adaptivity_error_ = x;
  }

  const element_data::dofs_optional& element_data::
  dofs () const
  {
    return this->dofs_;
  }

  element_data::dofs_optional& element_data::
  dofs ()
  {
    return this->dofs_;
  }

  void element_data::
  dofs (const dofs_type& x)
  {
    this->dofs_.set (x);
  }

  void element_data::
  dofs (const dofs_optional& x)
  {
    this->dofs_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace XMLStructure
{
  // structure
  //

  structure::
  structure ()
  : ::xml_schema::type (),
    element_data_ (::xml_schema::flags (), this)
  {
  }

  structure::
  structure (const structure& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    element_data_ (x.element_data_, f, this)
  {
  }

  structure::
  structure (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    element_data_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void structure::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // element_data
      //
      if (n.name () == "element_data" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< element_data_type > r (
          element_data_traits::create (i, f, this));

        this->element_data_.push_back (r);
        continue;
      }

      break;
    }
  }

  structure* structure::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class structure (*this, f, c);
  }

  structure::
  ~structure ()
  {
  }

  // element_data
  //

  element_data::
  element_data (const field_id_type& field_id,
                const time_step_type& time_step,
                const adaptivity_step_type& adaptivity_step,
                const solution_type_type& solution_type)
  : ::xml_schema::type (),
    field_id_ (field_id, ::xml_schema::flags (), this),
    time_step_ (time_step, ::xml_schema::flags (), this),
    adaptivity_step_ (adaptivity_step, ::xml_schema::flags (), this),
    solution_type_ (solution_type, ::xml_schema::flags (), this),
    time_step_length_ (::xml_schema::flags (), this),
    adaptivity_error_ (::xml_schema::flags (), this),
    dofs_ (::xml_schema::flags (), this)
  {
  }

  element_data::
  element_data (const element_data& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    field_id_ (x.field_id_, f, this),
    time_step_ (x.time_step_, f, this),
    adaptivity_step_ (x.adaptivity_step_, f, this),
    solution_type_ (x.solution_type_, f, this),
    time_step_length_ (x.time_step_length_, f, this),
    adaptivity_error_ (x.adaptivity_error_, f, this),
    dofs_ (x.dofs_, f, this)
  {
  }

  element_data::
  element_data (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    field_id_ (f, this),
    time_step_ (f, this),
    adaptivity_step_ (f, this),
    solution_type_ (f, this),
    time_step_length_ (f, this),
    adaptivity_error_ (f, this),
    dofs_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void element_data::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "field_id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< field_id_type > r (
          field_id_traits::create (i, f, this));

        this->field_id_.set (r);
        continue;
      }

      if (n.name () == "time_step" && n.namespace_ ().empty ())
      {
        this->time_step_.set (time_step_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "adaptivity_step" && n.namespace_ ().empty ())
      {
        this->adaptivity_step_.set (adaptivity_step_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "solution_type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< solution_type_type > r (
          solution_type_traits::create (i, f, this));

        this->solution_type_.set (r);
        continue;
      }

      if (n.name () == "time_step_length" && n.namespace_ ().empty ())
      {
        this->time_step_length_.set (time_step_length_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "adaptivity_error" && n.namespace_ ().empty ())
      {
        this->adaptivity_error_.set (adaptivity_error_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "dofs" && n.namespace_ ().empty ())
      {
        this->dofs_.set (dofs_traits::create (i, f, this));
        continue;
      }
    }

    if (!field_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "field_id",
        "");
    }

    if (!time_step_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "time_step",
        "");
    }

    if (!adaptivity_step_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "adaptivity_step",
        "");
    }

    if (!solution_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "solution_type",
        "");
    }
  }

  element_data* element_data::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class element_data (*this, f, c);
  }

  element_data::
  ~element_data ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace XMLStructure
{
  ::std::ostream&
  operator<< (::std::ostream& o, const structure& i)
  {
    for (structure::element_data_const_iterator
         b (i.element_data ().begin ()), e (i.element_data ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "element_data: " << *b;
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const element_data& i)
  {
    o << ::std::endl << "field_id: " << i.field_id ();
    o << ::std::endl << "time_step: " << i.time_step ();
    o << ::std::endl << "adaptivity_step: " << i.adaptivity_step ();
    o << ::std::endl << "solution_type: " << i.solution_type ();
    if (i.time_step_length ())
    {
      o << ::std::endl << "time_step_length: " << *i.time_step_length ();
    }

    if (i.adaptivity_error ())
    {
      o << ::std::endl << "adaptivity_error: " << *i.adaptivity_error ();
    }

    if (i.dofs ())
    {
      o << ::std::endl << "dofs: " << *i.dofs ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace XMLStructure
{
  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::XMLStructure::structure > r (
      ::XMLStructure::structure_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLStructure::structure > r (
      ::XMLStructure::structure_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLStructure::structure > r (
      ::XMLStructure::structure_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLStructure::structure_ (isrc, f, p);
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLStructure::structure_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLStructure::structure_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLStructure::structure_ (isrc, f, p);
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLStructure::structure_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLStructure::structure_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::XMLStructure::structure > r (
      ::XMLStructure::structure_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLStructure::structure > r (
      ::XMLStructure::structure_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLStructure::structure > r (
      ::XMLStructure::structure_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::XMLStructure::structure > r (
        ::XMLStructure::structure_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "structure" &&
        n.namespace_ () == "XMLStructure")
    {
      ::std::auto_ptr< ::XMLStructure::structure > r (
        ::xsd::cxx::tree::traits< ::XMLStructure::structure, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "structure",
      "XMLStructure");
  }

  ::std::auto_ptr< ::XMLStructure::structure >
  structure_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "structure" &&
        n.namespace_ () == "XMLStructure")
    {
      ::std::auto_ptr< ::XMLStructure::structure > r (
        ::xsd::cxx::tree::traits< ::XMLStructure::structure, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "structure",
      "XMLStructure");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace XMLStructure
{
  void
  structure_ (::std::ostream& o,
              const ::XMLStructure::structure& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLStructure::structure_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  structure_ (::std::ostream& o,
              const ::XMLStructure::structure& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLStructure::structure_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  structure_ (::std::ostream& o,
              const ::XMLStructure::structure& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLStructure::structure_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  structure_ (::xercesc::XMLFormatTarget& t,
              const ::XMLStructure::structure& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLStructure::structure_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  structure_ (::xercesc::XMLFormatTarget& t,
              const ::XMLStructure::structure& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLStructure::structure_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  structure_ (::xercesc::XMLFormatTarget& t,
              const ::XMLStructure::structure& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLStructure::structure_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  structure_ (::xercesc::DOMDocument& d,
              const ::XMLStructure::structure& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "structure" &&
        n.namespace_ () == "XMLStructure")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "structure",
        "XMLStructure");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  structure_ (const ::XMLStructure::structure& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "structure",
        "XMLStructure",
        m, f));

    ::XMLStructure::structure_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const structure& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // element_data
    //
    for (structure::element_data_const_iterator
         b (i.element_data ().begin ()), n (i.element_data ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "element_data",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const element_data& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // field_id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "field_id",
          e));

      a << i.field_id ();
    }

    // time_step
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "time_step",
          e));

      a << i.time_step ();
    }

    // adaptivity_step
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "adaptivity_step",
          e));

      a << i.adaptivity_step ();
    }

    // solution_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "solution_type",
          e));

      a << i.solution_type ();
    }

    // time_step_length
    //
    if (i.time_step_length ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "time_step_length",
          e));

      a << ::xml_schema::as_double(*i.time_step_length ());
    }

    // adaptivity_error
    //
    if (i.adaptivity_error ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "adaptivity_error",
          e));

      a << ::xml_schema::as_double(*i.adaptivity_error ());
    }

    // dofs
    //
    if (i.dofs ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "dofs",
          e));

      a << *i.dofs ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

