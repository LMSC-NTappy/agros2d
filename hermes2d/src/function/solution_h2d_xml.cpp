// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "solution_h2d_xml.h"

namespace XMLSolution
{
  // solution
  // 

  const solution::mono_coeffs_sequence& solution::
  mono_coeffs () const
  {
    return this->mono_coeffs_;
  }

  solution::mono_coeffs_sequence& solution::
  mono_coeffs ()
  {
    return this->mono_coeffs_;
  }

  void solution::
  mono_coeffs (const mono_coeffs_sequence& s)
  {
    this->mono_coeffs_ = s;
  }

  const solution::elem_orders_sequence& solution::
  elem_orders () const
  {
    return this->elem_orders_;
  }

  solution::elem_orders_sequence& solution::
  elem_orders ()
  {
    return this->elem_orders_;
  }

  void solution::
  elem_orders (const elem_orders_sequence& s)
  {
    this->elem_orders_ = s;
  }

  const solution::component_sequence& solution::
  component () const
  {
    return this->component_;
  }

  solution::component_sequence& solution::
  component ()
  {
    return this->component_;
  }

  void solution::
  component (const component_sequence& s)
  {
    this->component_ = s;
  }

  const solution::num_components_type& solution::
  num_components () const
  {
    return this->num_components_.get ();
  }

  solution::num_components_type& solution::
  num_components ()
  {
    return this->num_components_.get ();
  }

  void solution::
  num_components (const num_components_type& x)
  {
    this->num_components_.set (x);
  }

  const solution::num_elems_type& solution::
  num_elems () const
  {
    return this->num_elems_.get ();
  }

  solution::num_elems_type& solution::
  num_elems ()
  {
    return this->num_elems_.get ();
  }

  void solution::
  num_elems (const num_elems_type& x)
  {
    this->num_elems_.set (x);
  }

  const solution::num_coeffs_type& solution::
  num_coeffs () const
  {
    return this->num_coeffs_.get ();
  }

  solution::num_coeffs_type& solution::
  num_coeffs ()
  {
    return this->num_coeffs_.get ();
  }

  void solution::
  num_coeffs (const num_coeffs_type& x)
  {
    this->num_coeffs_.set (x);
  }

  const solution::exact_type& solution::
  exact () const
  {
    return this->exact_.get ();
  }

  solution::exact_type& solution::
  exact ()
  {
    return this->exact_.get ();
  }

  void solution::
  exact (const exact_type& x)
  {
    this->exact_.set (x);
  }

  const solution::exactComplex_type& solution::
  exactComplex () const
  {
    return this->exactComplex_.get ();
  }

  solution::exactComplex_type& solution::
  exactComplex ()
  {
    return this->exactComplex_.get ();
  }

  void solution::
  exactComplex (const exactComplex_type& x)
  {
    this->exactComplex_.set (x);
  }

  const solution::exactConstantXReal_optional& solution::
  exactConstantXReal () const
  {
    return this->exactConstantXReal_;
  }

  solution::exactConstantXReal_optional& solution::
  exactConstantXReal ()
  {
    return this->exactConstantXReal_;
  }

  void solution::
  exactConstantXReal (const exactConstantXReal_type& x)
  {
    this->exactConstantXReal_.set (x);
  }

  void solution::
  exactConstantXReal (const exactConstantXReal_optional& x)
  {
    this->exactConstantXReal_ = x;
  }

  const solution::exactConstantYReal_optional& solution::
  exactConstantYReal () const
  {
    return this->exactConstantYReal_;
  }

  solution::exactConstantYReal_optional& solution::
  exactConstantYReal ()
  {
    return this->exactConstantYReal_;
  }

  void solution::
  exactConstantYReal (const exactConstantYReal_type& x)
  {
    this->exactConstantYReal_.set (x);
  }

  void solution::
  exactConstantYReal (const exactConstantYReal_optional& x)
  {
    this->exactConstantYReal_ = x;
  }

  const solution::exactConstantXComplex_optional& solution::
  exactConstantXComplex () const
  {
    return this->exactConstantXComplex_;
  }

  solution::exactConstantXComplex_optional& solution::
  exactConstantXComplex ()
  {
    return this->exactConstantXComplex_;
  }

  void solution::
  exactConstantXComplex (const exactConstantXComplex_type& x)
  {
    this->exactConstantXComplex_.set (x);
  }

  void solution::
  exactConstantXComplex (const exactConstantXComplex_optional& x)
  {
    this->exactConstantXComplex_ = x;
  }

  const solution::exactConstantYComplex_optional& solution::
  exactConstantYComplex () const
  {
    return this->exactConstantYComplex_;
  }

  solution::exactConstantYComplex_optional& solution::
  exactConstantYComplex ()
  {
    return this->exactConstantYComplex_;
  }

  void solution::
  exactConstantYComplex (const exactConstantYComplex_type& x)
  {
    this->exactConstantYComplex_.set (x);
  }

  void solution::
  exactConstantYComplex (const exactConstantYComplex_optional& x)
  {
    this->exactConstantYComplex_ = x;
  }

  const solution::spaceType_optional& solution::
  spaceType () const
  {
    return this->spaceType_;
  }

  solution::spaceType_optional& solution::
  spaceType ()
  {
    return this->spaceType_;
  }

  void solution::
  spaceType (const spaceType_type& x)
  {
    this->spaceType_.set (x);
  }

  void solution::
  spaceType (const spaceType_optional& x)
  {
    this->spaceType_ = x;
  }

  void solution::
  spaceType (::std::auto_ptr< spaceType_type > x)
  {
    this->spaceType_.set (x);
  }


  // mono_coeffs
  // 

  const mono_coeffs::id_type& mono_coeffs::
  id () const
  {
    return this->id_.get ();
  }

  mono_coeffs::id_type& mono_coeffs::
  id ()
  {
    return this->id_.get ();
  }

  void mono_coeffs::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const mono_coeffs::real_type& mono_coeffs::
  real () const
  {
    return this->real_.get ();
  }

  mono_coeffs::real_type& mono_coeffs::
  real ()
  {
    return this->real_.get ();
  }

  void mono_coeffs::
  real (const real_type& x)
  {
    this->real_.set (x);
  }

  const mono_coeffs::imaginary_optional& mono_coeffs::
  imaginary () const
  {
    return this->imaginary_;
  }

  mono_coeffs::imaginary_optional& mono_coeffs::
  imaginary ()
  {
    return this->imaginary_;
  }

  void mono_coeffs::
  imaginary (const imaginary_type& x)
  {
    this->imaginary_.set (x);
  }

  void mono_coeffs::
  imaginary (const imaginary_optional& x)
  {
    this->imaginary_ = x;
  }


  // elem_orders
  // 

  const elem_orders::id_type& elem_orders::
  id () const
  {
    return this->id_.get ();
  }

  elem_orders::id_type& elem_orders::
  id ()
  {
    return this->id_.get ();
  }

  void elem_orders::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const elem_orders::order_type& elem_orders::
  order () const
  {
    return this->order_.get ();
  }

  elem_orders::order_type& elem_orders::
  order ()
  {
    return this->order_.get ();
  }

  void elem_orders::
  order (const order_type& x)
  {
    this->order_.set (x);
  }


  // component
  // 

  const component::elem_coeffs_sequence& component::
  elem_coeffs () const
  {
    return this->elem_coeffs_;
  }

  component::elem_coeffs_sequence& component::
  elem_coeffs ()
  {
    return this->elem_coeffs_;
  }

  void component::
  elem_coeffs (const elem_coeffs_sequence& s)
  {
    this->elem_coeffs_ = s;
  }

  const component::component_number_optional& component::
  component_number () const
  {
    return this->component_number_;
  }

  component::component_number_optional& component::
  component_number ()
  {
    return this->component_number_;
  }

  void component::
  component_number (const component_number_type& x)
  {
    this->component_number_.set (x);
  }

  void component::
  component_number (const component_number_optional& x)
  {
    this->component_number_ = x;
  }


  // elem_coeffs
  // 

  const elem_coeffs::id_type& elem_coeffs::
  id () const
  {
    return this->id_.get ();
  }

  elem_coeffs::id_type& elem_coeffs::
  id ()
  {
    return this->id_.get ();
  }

  void elem_coeffs::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const elem_coeffs::coeff_type& elem_coeffs::
  coeff () const
  {
    return this->coeff_.get ();
  }

  elem_coeffs::coeff_type& elem_coeffs::
  coeff ()
  {
    return this->coeff_.get ();
  }

  void elem_coeffs::
  coeff (const coeff_type& x)
  {
    this->coeff_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace XMLSolution
{
  // solution
  //

  solution::
  solution (const num_components_type& num_components,
            const num_elems_type& num_elems,
            const num_coeffs_type& num_coeffs,
            const exact_type& exact,
            const exactComplex_type& exactComplex)
  : ::xml_schema::type (),
    mono_coeffs_ (::xml_schema::flags (), this),
    elem_orders_ (::xml_schema::flags (), this),
    component_ (::xml_schema::flags (), this),
    num_components_ (num_components, ::xml_schema::flags (), this),
    num_elems_ (num_elems, ::xml_schema::flags (), this),
    num_coeffs_ (num_coeffs, ::xml_schema::flags (), this),
    exact_ (exact, ::xml_schema::flags (), this),
    exactComplex_ (exactComplex, ::xml_schema::flags (), this),
    exactConstantXReal_ (::xml_schema::flags (), this),
    exactConstantYReal_ (::xml_schema::flags (), this),
    exactConstantXComplex_ (::xml_schema::flags (), this),
    exactConstantYComplex_ (::xml_schema::flags (), this),
    spaceType_ (::xml_schema::flags (), this)
  {
  }

  solution::
  solution (const solution& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    mono_coeffs_ (x.mono_coeffs_, f, this),
    elem_orders_ (x.elem_orders_, f, this),
    component_ (x.component_, f, this),
    num_components_ (x.num_components_, f, this),
    num_elems_ (x.num_elems_, f, this),
    num_coeffs_ (x.num_coeffs_, f, this),
    exact_ (x.exact_, f, this),
    exactComplex_ (x.exactComplex_, f, this),
    exactConstantXReal_ (x.exactConstantXReal_, f, this),
    exactConstantYReal_ (x.exactConstantYReal_, f, this),
    exactConstantXComplex_ (x.exactConstantXComplex_, f, this),
    exactConstantYComplex_ (x.exactConstantYComplex_, f, this),
    spaceType_ (x.spaceType_, f, this)
  {
  }

  solution::
  solution (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    mono_coeffs_ (f, this),
    elem_orders_ (f, this),
    component_ (f, this),
    num_components_ (f, this),
    num_elems_ (f, this),
    num_coeffs_ (f, this),
    exact_ (f, this),
    exactComplex_ (f, this),
    exactConstantXReal_ (f, this),
    exactConstantYReal_ (f, this),
    exactConstantXComplex_ (f, this),
    exactConstantYComplex_ (f, this),
    spaceType_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void solution::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // mono_coeffs
      //
      if (n.name () == "mono_coeffs" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< mono_coeffs_type > r (
          mono_coeffs_traits::create (i, f, this));

        this->mono_coeffs_.push_back (r);
        continue;
      }

      // elem_orders
      //
      if (n.name () == "elem_orders" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< elem_orders_type > r (
          elem_orders_traits::create (i, f, this));

        this->elem_orders_.push_back (r);
        continue;
      }

      // component
      //
      if (n.name () == "component" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< component_type > r (
          component_traits::create (i, f, this));

        this->component_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "num_components" && n.namespace_ ().empty ())
      {
        this->num_components_.set (num_components_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "num_elems" && n.namespace_ ().empty ())
      {
        this->num_elems_.set (num_elems_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "num_coeffs" && n.namespace_ ().empty ())
      {
        this->num_coeffs_.set (num_coeffs_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "exact" && n.namespace_ ().empty ())
      {
        this->exact_.set (exact_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "exactComplex" && n.namespace_ ().empty ())
      {
        this->exactComplex_.set (exactComplex_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "exactConstantXReal" && n.namespace_ ().empty ())
      {
        this->exactConstantXReal_.set (exactConstantXReal_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "exactConstantYReal" && n.namespace_ ().empty ())
      {
        this->exactConstantYReal_.set (exactConstantYReal_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "exactConstantXComplex" && n.namespace_ ().empty ())
      {
        this->exactConstantXComplex_.set (exactConstantXComplex_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "exactConstantYComplex" && n.namespace_ ().empty ())
      {
        this->exactConstantYComplex_.set (exactConstantYComplex_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "spaceType" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< spaceType_type > r (
          spaceType_traits::create (i, f, this));

        this->spaceType_.set (r);
        continue;
      }
    }

    if (!num_components_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "num_components",
        "");
    }

    if (!num_elems_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "num_elems",
        "");
    }

    if (!num_coeffs_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "num_coeffs",
        "");
    }

    if (!exact_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "exact",
        "");
    }

    if (!exactComplex_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "exactComplex",
        "");
    }
  }

  solution* solution::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class solution (*this, f, c);
  }

  solution::
  ~solution ()
  {
  }

  // mono_coeffs
  //

  mono_coeffs::
  mono_coeffs (const id_type& id,
               const real_type& real)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    real_ (real, ::xml_schema::flags (), this),
    imaginary_ (::xml_schema::flags (), this)
  {
  }

  mono_coeffs::
  mono_coeffs (const mono_coeffs& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    real_ (x.real_, f, this),
    imaginary_ (x.imaginary_, f, this)
  {
  }

  mono_coeffs::
  mono_coeffs (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    real_ (f, this),
    imaginary_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void mono_coeffs::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "real" && n.namespace_ ().empty ())
      {
        this->real_.set (real_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "imaginary" && n.namespace_ ().empty ())
      {
        this->imaginary_.set (imaginary_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!real_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "real",
        "");
    }
  }

  mono_coeffs* mono_coeffs::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class mono_coeffs (*this, f, c);
  }

  mono_coeffs::
  ~mono_coeffs ()
  {
  }

  // elem_orders
  //

  elem_orders::
  elem_orders (const id_type& id,
               const order_type& order)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    order_ (order, ::xml_schema::flags (), this)
  {
  }

  elem_orders::
  elem_orders (const elem_orders& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    order_ (x.order_, f, this)
  {
  }

  elem_orders::
  elem_orders (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    order_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void elem_orders::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "order" && n.namespace_ ().empty ())
      {
        this->order_.set (order_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!order_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "order",
        "");
    }
  }

  elem_orders* elem_orders::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class elem_orders (*this, f, c);
  }

  elem_orders::
  ~elem_orders ()
  {
  }

  // component
  //

  component::
  component ()
  : ::xml_schema::type (),
    elem_coeffs_ (::xml_schema::flags (), this),
    component_number_ (::xml_schema::flags (), this)
  {
  }

  component::
  component (const component& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    elem_coeffs_ (x.elem_coeffs_, f, this),
    component_number_ (x.component_number_, f, this)
  {
  }

  component::
  component (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    elem_coeffs_ (f, this),
    component_number_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void component::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // elem_coeffs
      //
      if (n.name () == "elem_coeffs" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< elem_coeffs_type > r (
          elem_coeffs_traits::create (i, f, this));

        this->elem_coeffs_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "component_number" && n.namespace_ ().empty ())
      {
        this->component_number_.set (component_number_traits::create (i, f, this));
        continue;
      }
    }
  }

  component* component::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class component (*this, f, c);
  }

  component::
  ~component ()
  {
  }

  // elem_coeffs
  //

  elem_coeffs::
  elem_coeffs (const id_type& id,
               const coeff_type& coeff)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    coeff_ (coeff, ::xml_schema::flags (), this)
  {
  }

  elem_coeffs::
  elem_coeffs (const elem_coeffs& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    coeff_ (x.coeff_, f, this)
  {
  }

  elem_coeffs::
  elem_coeffs (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    coeff_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void elem_coeffs::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "coeff" && n.namespace_ ().empty ())
      {
        this->coeff_.set (coeff_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!coeff_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "coeff",
        "");
    }
  }

  elem_coeffs* elem_coeffs::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class elem_coeffs (*this, f, c);
  }

  elem_coeffs::
  ~elem_coeffs ()
  {
  }
}

#include <ostream>

namespace XMLSolution
{
  ::std::ostream&
  operator<< (::std::ostream& o, const solution& i)
  {
    for (solution::mono_coeffs_const_iterator
         b (i.mono_coeffs ().begin ()), e (i.mono_coeffs ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "mono_coeffs: " << *b;
    }

    for (solution::elem_orders_const_iterator
         b (i.elem_orders ().begin ()), e (i.elem_orders ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "elem_orders: " << *b;
    }

    for (solution::component_const_iterator
         b (i.component ().begin ()), e (i.component ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "component: " << *b;
    }

    o << ::std::endl << "num_components: " << i.num_components ();
    o << ::std::endl << "num_elems: " << i.num_elems ();
    o << ::std::endl << "num_coeffs: " << i.num_coeffs ();
    o << ::std::endl << "exact: " << i.exact ();
    o << ::std::endl << "exactComplex: " << i.exactComplex ();
    if (i.exactConstantXReal ())
    {
      o << ::std::endl << "exactConstantXReal: " << *i.exactConstantXReal ();
    }

    if (i.exactConstantYReal ())
    {
      o << ::std::endl << "exactConstantYReal: " << *i.exactConstantYReal ();
    }

    if (i.exactConstantXComplex ())
    {
      o << ::std::endl << "exactConstantXComplex: " << *i.exactConstantXComplex ();
    }

    if (i.exactConstantYComplex ())
    {
      o << ::std::endl << "exactConstantYComplex: " << *i.exactConstantYComplex ();
    }

    if (i.spaceType ())
    {
      o << ::std::endl << "spaceType: " << *i.spaceType ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const mono_coeffs& i)
  {
    o << ::std::endl << "id: " << i.id ();
    o << ::std::endl << "real: " << i.real ();
    if (i.imaginary ())
    {
      o << ::std::endl << "imaginary: " << *i.imaginary ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const elem_orders& i)
  {
    o << ::std::endl << "id: " << i.id ();
    o << ::std::endl << "order: " << i.order ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const component& i)
  {
    for (component::elem_coeffs_const_iterator
         b (i.elem_coeffs ().begin ()), e (i.elem_coeffs ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "elem_coeffs: " << *b;
    }

    if (i.component_number ())
    {
      o << ::std::endl << "component_number: " << *i.component_number ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const elem_coeffs& i)
  {
    o << ::std::endl << "id: " << i.id ();
    o << ::std::endl << "coeff: " << i.coeff ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace XMLSolution
{
  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::XMLSolution::solution > r (
      ::XMLSolution::solution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLSolution::solution > r (
      ::XMLSolution::solution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLSolution::solution > r (
      ::XMLSolution::solution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLSolution::solution_ (isrc, f, p);
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLSolution::solution_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLSolution::solution_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLSolution::solution_ (isrc, f, p);
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLSolution::solution_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLSolution::solution_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::XMLSolution::solution > r (
      ::XMLSolution::solution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLSolution::solution > r (
      ::XMLSolution::solution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLSolution::solution > r (
      ::XMLSolution::solution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::XMLSolution::solution > r (
        ::XMLSolution::solution_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "solution" &&
        n.namespace_ () == "XMLSolution")
    {
      ::std::auto_ptr< ::XMLSolution::solution > r (
        ::xsd::cxx::tree::traits< ::XMLSolution::solution, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "solution",
      "XMLSolution");
  }

  ::std::auto_ptr< ::XMLSolution::solution >
  solution_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "solution" &&
        n.namespace_ () == "XMLSolution")
    {
      ::std::auto_ptr< ::XMLSolution::solution > r (
        ::xsd::cxx::tree::traits< ::XMLSolution::solution, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "solution",
      "XMLSolution");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace XMLSolution
{
  void
  solution_ (::std::ostream& o,
             const ::XMLSolution::solution& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSolution::solution_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  solution_ (::std::ostream& o,
             const ::XMLSolution::solution& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSolution::solution_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  solution_ (::std::ostream& o,
             const ::XMLSolution::solution& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSolution::solution_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  solution_ (::xercesc::XMLFormatTarget& t,
             const ::XMLSolution::solution& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSolution::solution_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  solution_ (::xercesc::XMLFormatTarget& t,
             const ::XMLSolution::solution& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSolution::solution_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  solution_ (::xercesc::XMLFormatTarget& t,
             const ::XMLSolution::solution& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSolution::solution_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  solution_ (::xercesc::DOMDocument& d,
             const ::XMLSolution::solution& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "solution" &&
        n.namespace_ () == "XMLSolution")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "solution",
        "XMLSolution");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  solution_ (const ::XMLSolution::solution& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "solution",
        "XMLSolution",
        m, f));

    ::XMLSolution::solution_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const solution& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // mono_coeffs
    //
    for (solution::mono_coeffs_const_iterator
         b (i.mono_coeffs ().begin ()), n (i.mono_coeffs ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mono_coeffs",
          e));

      s << *b;
    }

    // elem_orders
    //
    for (solution::elem_orders_const_iterator
         b (i.elem_orders ().begin ()), n (i.elem_orders ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "elem_orders",
          e));

      s << *b;
    }

    // component
    //
    for (solution::component_const_iterator
         b (i.component ().begin ()), n (i.component ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "component",
          e));

      s << *b;
    }

    // num_components
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "num_components",
          e));

      a << i.num_components ();
    }

    // num_elems
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "num_elems",
          e));

      a << i.num_elems ();
    }

    // num_coeffs
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "num_coeffs",
          e));

      a << i.num_coeffs ();
    }

    // exact
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "exact",
          e));

      a << i.exact ();
    }

    // exactComplex
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "exactComplex",
          e));

      a << i.exactComplex ();
    }

    // exactConstantXReal
    //
    if (i.exactConstantXReal ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "exactConstantXReal",
          e));

      a << ::xml_schema::as_decimal(*i.exactConstantXReal ());
    }

    // exactConstantYReal
    //
    if (i.exactConstantYReal ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "exactConstantYReal",
          e));

      a << ::xml_schema::as_decimal(*i.exactConstantYReal ());
    }

    // exactConstantXComplex
    //
    if (i.exactConstantXComplex ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "exactConstantXComplex",
          e));

      a << ::xml_schema::as_decimal(*i.exactConstantXComplex ());
    }

    // exactConstantYComplex
    //
    if (i.exactConstantYComplex ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "exactConstantYComplex",
          e));

      a << ::xml_schema::as_decimal(*i.exactConstantYComplex ());
    }

    // spaceType
    //
    if (i.spaceType ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "spaceType",
          e));

      a << *i.spaceType ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const mono_coeffs& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // real
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "real",
          e));

      a << ::xml_schema::as_decimal(i.real ());
    }

    // imaginary
    //
    if (i.imaginary ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "imaginary",
          e));

      a << ::xml_schema::as_decimal(*i.imaginary ());
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const elem_orders& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // order
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "order",
          e));

      a << i.order ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const component& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // elem_coeffs
    //
    for (component::elem_coeffs_const_iterator
         b (i.elem_coeffs ().begin ()), n (i.elem_coeffs ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "elem_coeffs",
          e));

      s << *b;
    }

    // component_number
    //
    if (i.component_number ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "component_number",
          e));

      a << *i.component_number ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const elem_coeffs& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // coeff
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "coeff",
          e));

      a << i.coeff ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

