// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "space_h2d_xml.h"

namespace XMLSpace
{
  // space
  // 

  const space::element_data_sequence& space::
  element_data () const
  {
    return this->element_data_;
  }

  space::element_data_sequence& space::
  element_data ()
  {
    return this->element_data_;
  }

  void space::
  element_data (const element_data_sequence& s)
  {
    this->element_data_ = s;
  }

  const space::spaceType_optional& space::
  spaceType () const
  {
    return this->spaceType_;
  }

  space::spaceType_optional& space::
  spaceType ()
  {
    return this->spaceType_;
  }

  void space::
  spaceType (const spaceType_type& x)
  {
    this->spaceType_.set (x);
  }

  void space::
  spaceType (const spaceType_optional& x)
  {
    this->spaceType_ = x;
  }

  void space::
  spaceType (::std::auto_ptr< spaceType_type > x)
  {
    this->spaceType_.set (x);
  }


  // element_data
  // 

  const element_data::element_id_type& element_data::
  element_id () const
  {
    return this->element_id_.get ();
  }

  element_data::element_id_type& element_data::
  element_id ()
  {
    return this->element_id_.get ();
  }

  void element_data::
  element_id (const element_id_type& x)
  {
    this->element_id_.set (x);
  }

  const element_data::order_type& element_data::
  order () const
  {
    return this->order_.get ();
  }

  element_data::order_type& element_data::
  order ()
  {
    return this->order_.get ();
  }

  void element_data::
  order (const order_type& x)
  {
    this->order_.set (x);
  }

  const element_data::bdof_type& element_data::
  bdof () const
  {
    return this->bdof_.get ();
  }

  element_data::bdof_type& element_data::
  bdof ()
  {
    return this->bdof_.get ();
  }

  void element_data::
  bdof (const bdof_type& x)
  {
    this->bdof_.set (x);
  }

  const element_data::n_type& element_data::
  n () const
  {
    return this->n_.get ();
  }

  element_data::n_type& element_data::
  n ()
  {
    return this->n_.get ();
  }

  void element_data::
  n (const n_type& x)
  {
    this->n_.set (x);
  }

  const element_data::changed_in_last_adaptation_type& element_data::
  changed_in_last_adaptation () const
  {
    return this->changed_in_last_adaptation_.get ();
  }

  element_data::changed_in_last_adaptation_type& element_data::
  changed_in_last_adaptation ()
  {
    return this->changed_in_last_adaptation_.get ();
  }

  void element_data::
  changed_in_last_adaptation (const changed_in_last_adaptation_type& x)
  {
    this->changed_in_last_adaptation_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace XMLSpace
{
  // space
  //

  space::
  space ()
  : ::xml_schema::type (),
    element_data_ (::xml_schema::flags (), this),
    spaceType_ (::xml_schema::flags (), this)
  {
  }

  space::
  space (const space& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    element_data_ (x.element_data_, f, this),
    spaceType_ (x.spaceType_, f, this)
  {
  }

  space::
  space (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    element_data_ (f, this),
    spaceType_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void space::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // element_data
      //
      if (n.name () == "element_data" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< element_data_type > r (
          element_data_traits::create (i, f, this));

        this->element_data_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "spaceType" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< spaceType_type > r (
          spaceType_traits::create (i, f, this));

        this->spaceType_.set (r);
        continue;
      }
    }
  }

  space* space::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class space (*this, f, c);
  }

  space::
  ~space ()
  {
  }

  // element_data
  //

  element_data::
  element_data (const element_id_type& element_id,
                const order_type& order,
                const bdof_type& bdof,
                const n_type& n,
                const changed_in_last_adaptation_type& changed_in_last_adaptation)
  : ::xml_schema::type (),
    element_id_ (element_id, ::xml_schema::flags (), this),
    order_ (order, ::xml_schema::flags (), this),
    bdof_ (bdof, ::xml_schema::flags (), this),
    n_ (n, ::xml_schema::flags (), this),
    changed_in_last_adaptation_ (changed_in_last_adaptation, ::xml_schema::flags (), this)
  {
  }

  element_data::
  element_data (const element_data& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    element_id_ (x.element_id_, f, this),
    order_ (x.order_, f, this),
    bdof_ (x.bdof_, f, this),
    n_ (x.n_, f, this),
    changed_in_last_adaptation_ (x.changed_in_last_adaptation_, f, this)
  {
  }

  element_data::
  element_data (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    element_id_ (f, this),
    order_ (f, this),
    bdof_ (f, this),
    n_ (f, this),
    changed_in_last_adaptation_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void element_data::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "element_id" && n.namespace_ ().empty ())
      {
        this->element_id_.set (element_id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "order" && n.namespace_ ().empty ())
      {
        this->order_.set (order_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "bdof" && n.namespace_ ().empty ())
      {
        this->bdof_.set (bdof_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "n" && n.namespace_ ().empty ())
      {
        this->n_.set (n_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "changed_in_last_adaptation" && n.namespace_ ().empty ())
      {
        this->changed_in_last_adaptation_.set (changed_in_last_adaptation_traits::create (i, f, this));
        continue;
      }
    }

    if (!element_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "element_id",
        "");
    }

    if (!order_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "order",
        "");
    }

    if (!bdof_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "bdof",
        "");
    }

    if (!n_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "n",
        "");
    }

    if (!changed_in_last_adaptation_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "changed_in_last_adaptation",
        "");
    }
  }

  element_data* element_data::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class element_data (*this, f, c);
  }

  element_data::
  ~element_data ()
  {
  }
}

#include <ostream>

namespace XMLSpace
{
  ::std::ostream&
  operator<< (::std::ostream& o, const space& i)
  {
    for (space::element_data_const_iterator
         b (i.element_data ().begin ()), e (i.element_data ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "element_data: " << *b;
    }

    if (i.spaceType ())
    {
      o << ::std::endl << "spaceType: " << *i.spaceType ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const element_data& i)
  {
    o << ::std::endl << "element_id: " << i.element_id ();
    o << ::std::endl << "order: " << i.order ();
    o << ::std::endl << "bdof: " << i.bdof ();
    o << ::std::endl << "n: " << i.n ();
    o << ::std::endl << "changed_in_last_adaptation: " << i.changed_in_last_adaptation ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace XMLSpace
{
  ::std::auto_ptr< ::XMLSpace::space >
  space_ (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::XMLSpace::space > r (
      ::XMLSpace::space_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLSpace::space > r (
      ::XMLSpace::space_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLSpace::space > r (
      ::XMLSpace::space_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLSpace::space_ (isrc, f, p);
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLSpace::space_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XMLSpace::space_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLSpace::space_ (isrc, f, p);
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLSpace::space_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XMLSpace::space_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::XMLSpace::space > r (
      ::XMLSpace::space_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLSpace::space > r (
      ::XMLSpace::space_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::XMLSpace::space > r (
      ::XMLSpace::space_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::XMLSpace::space > r (
        ::XMLSpace::space_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "space" &&
        n.namespace_ () == "XMLSpace")
    {
      ::std::auto_ptr< ::XMLSpace::space > r (
        ::xsd::cxx::tree::traits< ::XMLSpace::space, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "space",
      "XMLSpace");
  }

  ::std::auto_ptr< ::XMLSpace::space >
  space_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "space" &&
        n.namespace_ () == "XMLSpace")
    {
      ::std::auto_ptr< ::XMLSpace::space > r (
        ::xsd::cxx::tree::traits< ::XMLSpace::space, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "space",
      "XMLSpace");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace XMLSpace
{
  void
  space_ (::std::ostream& o,
          const ::XMLSpace::space& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSpace::space_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  space_ (::std::ostream& o,
          const ::XMLSpace::space& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSpace::space_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  space_ (::std::ostream& o,
          const ::XMLSpace::space& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSpace::space_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  space_ (::xercesc::XMLFormatTarget& t,
          const ::XMLSpace::space& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSpace::space_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  space_ (::xercesc::XMLFormatTarget& t,
          const ::XMLSpace::space& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSpace::space_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  space_ (::xercesc::XMLFormatTarget& t,
          const ::XMLSpace::space& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::XMLSpace::space_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  space_ (::xercesc::DOMDocument& d,
          const ::XMLSpace::space& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "space" &&
        n.namespace_ () == "XMLSpace")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "space",
        "XMLSpace");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  space_ (const ::XMLSpace::space& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "space",
        "XMLSpace",
        m, f));

    ::XMLSpace::space_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const space& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // element_data
    //
    for (space::element_data_const_iterator
         b (i.element_data ().begin ()), n (i.element_data ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "element_data",
          e));

      s << *b;
    }

    // spaceType
    //
    if (i.spaceType ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "spaceType",
          e));

      a << *i.spaceType ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const element_data& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // element_id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "element_id",
          e));

      a << i.element_id ();
    }

    // order
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "order",
          e));

      a << i.order ();
    }

    // bdof
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "bdof",
          e));

      a << i.bdof ();
    }

    // n
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "n",
          e));

      a << i.n ();
    }

    // changed_in_last_adaptation
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "changed_in_last_adaptation",
          e));

      a << i.changed_in_last_adaptation ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

