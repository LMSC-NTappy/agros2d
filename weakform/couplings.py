#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Sat May 26 09:08:58 2012 by generateDS.py version 2.7a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class coupling(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, general=None, constants=None, volume=None):
        self.general = general
        self.constants = constants
        self.volume = volume
    def factory(*args_, **kwargs_):
        if coupling.subclass:
            return coupling.subclass(*args_, **kwargs_)
        else:
            return coupling(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_general(self): return self.general
    def set_general(self, general): self.general = general
    def get_constants(self): return self.constants
    def set_constants(self, constants): self.constants = constants
    def get_volume(self): return self.volume
    def set_volume(self, volume): self.volume = volume
    def export(self, outfile, level, namespace_='coupling:', name_='coupling', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='coupling')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='coupling'):
        pass
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='coupling', fromsubclass_=False):
        if self.general is not None:
            self.general.export(outfile, level, namespace_, name_='general', )
        if self.constants is not None:
            self.constants.export(outfile, level, namespace_, name_='constants', )
        if self.volume is not None:
            self.volume.export(outfile, level, namespace_, name_='volume', )
    def hasContent_(self):
        if (
            self.general is not None or
            self.constants is not None or
            self.volume is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='coupling'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.general is not None:
            showIndent(outfile, level)
            outfile.write('general=model_.general(\n')
            self.general.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.constants is not None:
            showIndent(outfile, level)
            outfile.write('constants=model_.constants(\n')
            self.constants.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.volume is not None:
            showIndent(outfile, level)
            outfile.write('volume=model_.volume(\n')
            self.volume.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'general':
            obj_ = general.factory()
            obj_.build(child_)
            self.set_general(obj_)
        elif nodeName_ == 'constants':
            obj_ = constants.factory()
            obj_.build(child_)
            self.set_constants(obj_)
        elif nodeName_ == 'volume':
            obj_ = volume.factory()
            obj_.build(child_)
            self.set_volume(obj_)
# end class coupling


class general(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, name=None, description=None, modules=None):
        self.id = _cast(None, id)
        self.name = _cast(None, name)
        self.description = description
        self.modules = modules
    def factory(*args_, **kwargs_):
        if general.subclass:
            return general.subclass(*args_, **kwargs_)
        else:
            return general(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_modules(self): return self.modules
    def set_modules(self, modules): self.modules = modules
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def export(self, outfile, level, namespace_='coupling:', name_='general', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='general')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='general'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='general', fromsubclass_=False):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
        if self.modules is not None:
            self.modules.export(outfile, level, namespace_, name_='modules', )
    def hasContent_(self):
        if (
            self.description is not None or
            self.modules is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='general'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
        if self.modules is not None:
            showIndent(outfile, level)
            outfile.write('modules=model_.modules(\n')
            self.modules.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'modules':
            obj_ = modules.factory()
            obj_.build(child_)
            self.set_modules(obj_)
# end class general


class constants(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, constant=None):
        if constant is None:
            self.constant = []
        else:
            self.constant = constant
    def factory(*args_, **kwargs_):
        if constants.subclass:
            return constants.subclass(*args_, **kwargs_)
        else:
            return constants(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_constant(self): return self.constant
    def set_constant(self, constant): self.constant = constant
    def add_constant(self, value): self.constant.append(value)
    def insert_constant(self, index, value): self.constant[index] = value
    def export(self, outfile, level, namespace_='coupling:', name_='constants', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='constants')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='constants'):
        pass
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='constants', fromsubclass_=False):
        for constant_ in self.constant:
            constant_.export(outfile, level, namespace_, name_='constant')
    def hasContent_(self):
        if (
            self.constant
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='constants'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('constant=[\n')
        level += 1
        for constant_ in self.constant:
            showIndent(outfile, level)
            outfile.write('model_.constant(\n')
            constant_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'constant':
            obj_ = constant.factory()
            obj_.build(child_)
            self.constant.append(obj_)
# end class constants


class constant(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, value=None):
        self.id = _cast(None, id)
        self.value = _cast(float, value)
        pass
    def factory(*args_, **kwargs_):
        if constant.subclass:
            return constant.subclass(*args_, **kwargs_)
        else:
            return constant(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def export(self, outfile, level, namespace_='coupling:', name_='constant', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='constant')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='constant'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            outfile.write(' value="%s"' % self.gds_format_double(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='constant', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='constant'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            showIndent(outfile, level)
            outfile.write('value = %e,\n' % (self.value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.append('value')
            try:
                self.value = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class constant


class modules(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, source=None, target=None):
        self.source = source
        self.target = target
    def factory(*args_, **kwargs_):
        if modules.subclass:
            return modules.subclass(*args_, **kwargs_)
        else:
            return modules(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_source(self): return self.source
    def set_source(self, source): self.source = source
    def get_target(self): return self.target
    def set_target(self, target): self.target = target
    def export(self, outfile, level, namespace_='coupling:', name_='modules', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='modules')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='modules'):
        pass
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='modules', fromsubclass_=False):
        if self.source is not None:
            self.source.export(outfile, level, namespace_, name_='source', )
        if self.target is not None:
            self.target.export(outfile, level, namespace_, name_='target', )
    def hasContent_(self):
        if (
            self.source is not None or
            self.target is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='modules'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.source is not None:
            showIndent(outfile, level)
            outfile.write('source=model_.source(\n')
            self.source.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.target is not None:
            showIndent(outfile, level)
            outfile.write('target=model_.target(\n')
            self.target.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'source':
            obj_ = source.factory()
            obj_.build(child_)
            self.set_source(obj_)
        elif nodeName_ == 'target':
            obj_ = target.factory()
            obj_.build(child_)
            self.set_target(obj_)
# end class modules


class source(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None):
        self.id = _cast(None, id)
        pass
    def factory(*args_, **kwargs_):
        if source.subclass:
            return source.subclass(*args_, **kwargs_)
        else:
            return source(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='coupling:', name_='source', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='source')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='source'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='source', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='source'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class source


class target(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None):
        self.id = _cast(None, id)
        pass
    def factory(*args_, **kwargs_):
        if target.subclass:
            return target.subclass(*args_, **kwargs_)
        else:
            return target(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='coupling:', name_='target', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='target')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='target'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='target', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='target'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class target


class volume(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, weakforms_volume=None):
        self.weakforms_volume = weakforms_volume
    def factory(*args_, **kwargs_):
        if volume.subclass:
            return volume.subclass(*args_, **kwargs_)
        else:
            return volume(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_weakforms_volume(self): return self.weakforms_volume
    def set_weakforms_volume(self, weakforms_volume): self.weakforms_volume = weakforms_volume
    def export(self, outfile, level, namespace_='coupling:', name_='volume', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='volume')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='volume'):
        pass
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='volume', fromsubclass_=False):
        if self.weakforms_volume is not None:
            self.weakforms_volume.export(outfile, level, namespace_, name_='weakforms_volume', )
    def hasContent_(self):
        if (
            self.weakforms_volume is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='volume'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.weakforms_volume is not None:
            showIndent(outfile, level)
            outfile.write('weakforms_volume=model_.weakforms_volume(\n')
            self.weakforms_volume.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'weakforms_volume':
            obj_ = weakforms_volume.factory()
            obj_.build(child_)
            self.set_weakforms_volume(obj_)
# end class volume


class weakforms_volume(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, weakform_volume=None):
        if weakform_volume is None:
            self.weakform_volume = []
        else:
            self.weakform_volume = weakform_volume
    def factory(*args_, **kwargs_):
        if weakforms_volume.subclass:
            return weakforms_volume.subclass(*args_, **kwargs_)
        else:
            return weakforms_volume(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_weakform_volume(self): return self.weakform_volume
    def set_weakform_volume(self, weakform_volume): self.weakform_volume = weakform_volume
    def add_weakform_volume(self, value): self.weakform_volume.append(value)
    def insert_weakform_volume(self, index, value): self.weakform_volume[index] = value
    def export(self, outfile, level, namespace_='coupling:', name_='weakforms_volume', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='weakforms_volume')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='weakforms_volume'):
        pass
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='weakforms_volume', fromsubclass_=False):
        for weakform_volume_ in self.weakform_volume:
            weakform_volume_.export(outfile, level, namespace_, name_='weakform_volume')
    def hasContent_(self):
        if (
            self.weakform_volume
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='weakforms_volume'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('weakform_volume=[\n')
        level += 1
        for weakform_volume_ in self.weakform_volume:
            showIndent(outfile, level)
            outfile.write('model_.weakform_volume(\n')
            weakform_volume_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'weakform_volume':
            obj_ = weakform_volume.factory()
            obj_.build(child_)
            self.weakform_volume.append(obj_)
# end class weakforms_volume


class weakform_surface(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, couplingtype=None, targetanalysis=None, sourceanalysis=None, matrix_form=None, vector_form=None):
        self.couplingtype = _cast(None, couplingtype)
        self.targetanalysis = _cast(None, targetanalysis)
        self.sourceanalysis = _cast(None, sourceanalysis)
        if matrix_form is None:
            self.matrix_form = []
        else:
            self.matrix_form = matrix_form
        if vector_form is None:
            self.vector_form = []
        else:
            self.vector_form = vector_form
    def factory(*args_, **kwargs_):
        if weakform_surface.subclass:
            return weakform_surface.subclass(*args_, **kwargs_)
        else:
            return weakform_surface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_matrix_form(self): return self.matrix_form
    def set_matrix_form(self, matrix_form): self.matrix_form = matrix_form
    def add_matrix_form(self, value): self.matrix_form.append(value)
    def insert_matrix_form(self, index, value): self.matrix_form[index] = value
    def get_vector_form(self): return self.vector_form
    def set_vector_form(self, vector_form): self.vector_form = vector_form
    def add_vector_form(self, value): self.vector_form.append(value)
    def insert_vector_form(self, index, value): self.vector_form[index] = value
    def get_couplingtype(self): return self.couplingtype
    def set_couplingtype(self, couplingtype): self.couplingtype = couplingtype
    def get_targetanalysis(self): return self.targetanalysis
    def set_targetanalysis(self, targetanalysis): self.targetanalysis = targetanalysis
    def get_sourceanalysis(self): return self.sourceanalysis
    def set_sourceanalysis(self, sourceanalysis): self.sourceanalysis = sourceanalysis
    def export(self, outfile, level, namespace_='coupling:', name_='weakform_surface', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='weakform_surface')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='weakform_surface'):
        if self.couplingtype is not None and 'couplingtype' not in already_processed:
            already_processed.append('couplingtype')
            outfile.write(' couplingtype=%s' % (self.gds_format_string(quote_attrib(self.couplingtype).encode(ExternalEncoding), input_name='couplingtype'), ))
        if self.targetanalysis is not None and 'targetanalysis' not in already_processed:
            already_processed.append('targetanalysis')
            outfile.write(' targetanalysis=%s' % (self.gds_format_string(quote_attrib(self.targetanalysis).encode(ExternalEncoding), input_name='targetanalysis'), ))
        if self.sourceanalysis is not None and 'sourceanalysis' not in already_processed:
            already_processed.append('sourceanalysis')
            outfile.write(' sourceanalysis=%s' % (self.gds_format_string(quote_attrib(self.sourceanalysis).encode(ExternalEncoding), input_name='sourceanalysis'), ))
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='weakform_surface', fromsubclass_=False):
        for matrix_form_ in self.matrix_form:
            matrix_form_.export(outfile, level, namespace_, name_='matrix_form')
        for vector_form_ in self.vector_form:
            vector_form_.export(outfile, level, namespace_, name_='vector_form')
    def hasContent_(self):
        if (
            self.matrix_form or
            self.vector_form
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='weakform_surface'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.couplingtype is not None and 'couplingtype' not in already_processed:
            already_processed.append('couplingtype')
            showIndent(outfile, level)
            outfile.write('couplingtype = "%s",\n' % (self.couplingtype,))
        if self.targetanalysis is not None and 'targetanalysis' not in already_processed:
            already_processed.append('targetanalysis')
            showIndent(outfile, level)
            outfile.write('targetanalysis = "%s",\n' % (self.targetanalysis,))
        if self.sourceanalysis is not None and 'sourceanalysis' not in already_processed:
            already_processed.append('sourceanalysis')
            showIndent(outfile, level)
            outfile.write('sourceanalysis = "%s",\n' % (self.sourceanalysis,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('matrix_form=[\n')
        level += 1
        for matrix_form_ in self.matrix_form:
            showIndent(outfile, level)
            outfile.write('model_.matrix_form(\n')
            matrix_form_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('vector_form=[\n')
        level += 1
        for vector_form_ in self.vector_form:
            showIndent(outfile, level)
            outfile.write('model_.vector_form(\n')
            vector_form_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('couplingtype', node)
        if value is not None and 'couplingtype' not in already_processed:
            already_processed.append('couplingtype')
            self.couplingtype = value
        value = find_attr_value_('targetanalysis', node)
        if value is not None and 'targetanalysis' not in already_processed:
            already_processed.append('targetanalysis')
            self.targetanalysis = value
        value = find_attr_value_('sourceanalysis', node)
        if value is not None and 'sourceanalysis' not in already_processed:
            already_processed.append('sourceanalysis')
            self.sourceanalysis = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'matrix_form':
            obj_ = matrix_form.factory()
            obj_.build(child_)
            self.matrix_form.append(obj_)
        elif nodeName_ == 'vector_form':
            obj_ = vector_form.factory()
            obj_.build(child_)
            self.vector_form.append(obj_)
# end class weakform_surface


class weakforms_surface(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, weakform_surface=None):
        if weakform_surface is None:
            self.weakform_surface = []
        else:
            self.weakform_surface = weakform_surface
    def factory(*args_, **kwargs_):
        if weakforms_surface.subclass:
            return weakforms_surface.subclass(*args_, **kwargs_)
        else:
            return weakforms_surface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_weakform_surface(self): return self.weakform_surface
    def set_weakform_surface(self, weakform_surface): self.weakform_surface = weakform_surface
    def add_weakform_surface(self, value): self.weakform_surface.append(value)
    def insert_weakform_surface(self, index, value): self.weakform_surface[index] = value
    def export(self, outfile, level, namespace_='coupling:', name_='weakforms_surface', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='weakforms_surface')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='weakforms_surface'):
        pass
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='weakforms_surface', fromsubclass_=False):
        for weakform_surface_ in self.weakform_surface:
            weakform_surface_.export(outfile, level, namespace_, name_='weakform_surface')
    def hasContent_(self):
        if (
            self.weakform_surface
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='weakforms_surface'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('weakform_surface=[\n')
        level += 1
        for weakform_surface_ in self.weakform_surface:
            showIndent(outfile, level)
            outfile.write('model_.weakform_surface(\n')
            weakform_surface_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'weakform_surface':
            obj_ = weakform_surface.factory()
            obj_.build(child_)
            self.weakform_surface.append(obj_)
# end class weakforms_surface


class weakform_volume(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, couplingtype=None, targetanalysis=None, sourceanalysis=None, matrix_form=None, vector_form=None):
        self.couplingtype = _cast(None, couplingtype)
        self.targetanalysis = _cast(None, targetanalysis)
        self.sourceanalysis = _cast(None, sourceanalysis)
        if matrix_form is None:
            self.matrix_form = []
        else:
            self.matrix_form = matrix_form
        if vector_form is None:
            self.vector_form = []
        else:
            self.vector_form = vector_form
    def factory(*args_, **kwargs_):
        if weakform_volume.subclass:
            return weakform_volume.subclass(*args_, **kwargs_)
        else:
            return weakform_volume(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_matrix_form(self): return self.matrix_form
    def set_matrix_form(self, matrix_form): self.matrix_form = matrix_form
    def add_matrix_form(self, value): self.matrix_form.append(value)
    def insert_matrix_form(self, index, value): self.matrix_form[index] = value
    def get_vector_form(self): return self.vector_form
    def set_vector_form(self, vector_form): self.vector_form = vector_form
    def add_vector_form(self, value): self.vector_form.append(value)
    def insert_vector_form(self, index, value): self.vector_form[index] = value
    def get_couplingtype(self): return self.couplingtype
    def set_couplingtype(self, couplingtype): self.couplingtype = couplingtype
    def get_targetanalysis(self): return self.targetanalysis
    def set_targetanalysis(self, targetanalysis): self.targetanalysis = targetanalysis
    def get_sourceanalysis(self): return self.sourceanalysis
    def set_sourceanalysis(self, sourceanalysis): self.sourceanalysis = sourceanalysis
    def export(self, outfile, level, namespace_='coupling:', name_='weakform_volume', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='weakform_volume')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='weakform_volume'):
        if self.couplingtype is not None and 'couplingtype' not in already_processed:
            already_processed.append('couplingtype')
            outfile.write(' couplingtype=%s' % (self.gds_format_string(quote_attrib(self.couplingtype).encode(ExternalEncoding), input_name='couplingtype'), ))
        if self.targetanalysis is not None and 'targetanalysis' not in already_processed:
            already_processed.append('targetanalysis')
            outfile.write(' targetanalysis=%s' % (self.gds_format_string(quote_attrib(self.targetanalysis).encode(ExternalEncoding), input_name='targetanalysis'), ))
        if self.sourceanalysis is not None and 'sourceanalysis' not in already_processed:
            already_processed.append('sourceanalysis')
            outfile.write(' sourceanalysis=%s' % (self.gds_format_string(quote_attrib(self.sourceanalysis).encode(ExternalEncoding), input_name='sourceanalysis'), ))
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='weakform_volume', fromsubclass_=False):
        for matrix_form_ in self.matrix_form:
            matrix_form_.export(outfile, level, namespace_, name_='matrix_form')
        for vector_form_ in self.vector_form:
            vector_form_.export(outfile, level, namespace_, name_='vector_form')
    def hasContent_(self):
        if (
            self.matrix_form or
            self.vector_form
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='weakform_volume'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.couplingtype is not None and 'couplingtype' not in already_processed:
            already_processed.append('couplingtype')
            showIndent(outfile, level)
            outfile.write('couplingtype = "%s",\n' % (self.couplingtype,))
        if self.targetanalysis is not None and 'targetanalysis' not in already_processed:
            already_processed.append('targetanalysis')
            showIndent(outfile, level)
            outfile.write('targetanalysis = "%s",\n' % (self.targetanalysis,))
        if self.sourceanalysis is not None and 'sourceanalysis' not in already_processed:
            already_processed.append('sourceanalysis')
            showIndent(outfile, level)
            outfile.write('sourceanalysis = "%s",\n' % (self.sourceanalysis,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('matrix_form=[\n')
        level += 1
        for matrix_form_ in self.matrix_form:
            showIndent(outfile, level)
            outfile.write('model_.matrix_form(\n')
            matrix_form_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('vector_form=[\n')
        level += 1
        for vector_form_ in self.vector_form:
            showIndent(outfile, level)
            outfile.write('model_.vector_form(\n')
            vector_form_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('couplingtype', node)
        if value is not None and 'couplingtype' not in already_processed:
            already_processed.append('couplingtype')
            self.couplingtype = value
        value = find_attr_value_('targetanalysis', node)
        if value is not None and 'targetanalysis' not in already_processed:
            already_processed.append('targetanalysis')
            self.targetanalysis = value
        value = find_attr_value_('sourceanalysis', node)
        if value is not None and 'sourceanalysis' not in already_processed:
            already_processed.append('sourceanalysis')
            self.sourceanalysis = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'matrix_form':
            obj_ = matrix_form.factory()
            obj_.build(child_)
            self.matrix_form.append(obj_)
        elif nodeName_ == 'vector_form':
            obj_ = vector_form.factory()
            obj_.build(child_)
            self.vector_form.append(obj_)
# end class weakform_volume


class matrix_form(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, i=None, planar=None, j=None, axi=None):
        self.i = _cast(int, i)
        self.planar = _cast(None, planar)
        self.j = _cast(int, j)
        self.axi = _cast(None, axi)
        pass
    def factory(*args_, **kwargs_):
        if matrix_form.subclass:
            return matrix_form.subclass(*args_, **kwargs_)
        else:
            return matrix_form(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_i(self): return self.i
    def set_i(self, i): self.i = i
    def get_planar(self): return self.planar
    def set_planar(self, planar): self.planar = planar
    def get_j(self): return self.j
    def set_j(self, j): self.j = j
    def get_axi(self): return self.axi
    def set_axi(self, axi): self.axi = axi
    def export(self, outfile, level, namespace_='coupling:', name_='matrix_form', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='matrix_form')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='matrix_form'):
        if self.i is not None and 'i' not in already_processed:
            already_processed.append('i')
            outfile.write(' i="%s"' % self.gds_format_integer(self.i, input_name='i'))
        if self.planar is not None and 'planar' not in already_processed:
            already_processed.append('planar')
            outfile.write(' planar=%s' % (self.gds_format_string(quote_attrib(self.planar).encode(ExternalEncoding), input_name='planar'), ))
        if self.j is not None and 'j' not in already_processed:
            already_processed.append('j')
            outfile.write(' j="%s"' % self.gds_format_integer(self.j, input_name='j'))
        if self.axi is not None and 'axi' not in already_processed:
            already_processed.append('axi')
            outfile.write(' axi=%s' % (self.gds_format_string(quote_attrib(self.axi).encode(ExternalEncoding), input_name='axi'), ))
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='matrix_form', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='matrix_form'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.i is not None and 'i' not in already_processed:
            already_processed.append('i')
            showIndent(outfile, level)
            outfile.write('i = %d,\n' % (self.i,))
        if self.planar is not None and 'planar' not in already_processed:
            already_processed.append('planar')
            showIndent(outfile, level)
            outfile.write('planar = "%s",\n' % (self.planar,))
        if self.j is not None and 'j' not in already_processed:
            already_processed.append('j')
            showIndent(outfile, level)
            outfile.write('j = %d,\n' % (self.j,))
        if self.axi is not None and 'axi' not in already_processed:
            already_processed.append('axi')
            showIndent(outfile, level)
            outfile.write('axi = "%s",\n' % (self.axi,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('i', node)
        if value is not None and 'i' not in already_processed:
            already_processed.append('i')
            try:
                self.i = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('planar', node)
        if value is not None and 'planar' not in already_processed:
            already_processed.append('planar')
            self.planar = value
        value = find_attr_value_('j', node)
        if value is not None and 'j' not in already_processed:
            already_processed.append('j')
            try:
                self.j = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('axi', node)
        if value is not None and 'axi' not in already_processed:
            already_processed.append('axi')
            self.axi = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class matrix_form


class vector_form(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, i=None, planar=None, j=None, axi=None):
        self.i = _cast(int, i)
        self.planar = _cast(None, planar)
        self.j = _cast(int, j)
        self.axi = _cast(None, axi)
        pass
    def factory(*args_, **kwargs_):
        if vector_form.subclass:
            return vector_form.subclass(*args_, **kwargs_)
        else:
            return vector_form(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_i(self): return self.i
    def set_i(self, i): self.i = i
    def get_planar(self): return self.planar
    def set_planar(self, planar): self.planar = planar
    def get_j(self): return self.j
    def set_j(self, j): self.j = j
    def get_axi(self): return self.axi
    def set_axi(self, axi): self.axi = axi
    def export(self, outfile, level, namespace_='coupling:', name_='vector_form', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='vector_form')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='coupling:', name_='vector_form'):
        if self.i is not None and 'i' not in already_processed:
            already_processed.append('i')
            outfile.write(' i="%s"' % self.gds_format_integer(self.i, input_name='i'))
        if self.planar is not None and 'planar' not in already_processed:
            already_processed.append('planar')
            outfile.write(' planar=%s' % (self.gds_format_string(quote_attrib(self.planar).encode(ExternalEncoding), input_name='planar'), ))
        if self.j is not None and 'j' not in already_processed:
            already_processed.append('j')
            outfile.write(' j="%s"' % self.gds_format_integer(self.j, input_name='j'))
        if self.axi is not None and 'axi' not in already_processed:
            already_processed.append('axi')
            outfile.write(' axi=%s' % (self.gds_format_string(quote_attrib(self.axi).encode(ExternalEncoding), input_name='axi'), ))
    def exportChildren(self, outfile, level, namespace_='coupling:', name_='vector_form', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='vector_form'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.i is not None and 'i' not in already_processed:
            already_processed.append('i')
            showIndent(outfile, level)
            outfile.write('i = %d,\n' % (self.i,))
        if self.planar is not None and 'planar' not in already_processed:
            already_processed.append('planar')
            showIndent(outfile, level)
            outfile.write('planar = "%s",\n' % (self.planar,))
        if self.j is not None and 'j' not in already_processed:
            already_processed.append('j')
            showIndent(outfile, level)
            outfile.write('j = %d,\n' % (self.j,))
        if self.axi is not None and 'axi' not in already_processed:
            already_processed.append('axi')
            showIndent(outfile, level)
            outfile.write('axi = "%s",\n' % (self.axi,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('i', node)
        if value is not None and 'i' not in already_processed:
            already_processed.append('i')
            try:
                self.i = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('planar', node)
        if value is not None and 'planar' not in already_processed:
            already_processed.append('planar')
            self.planar = value
        value = find_attr_value_('j', node)
        if value is not None and 'j' not in already_processed:
            already_processed.append('j')
            try:
                self.j = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('axi', node)
        if value is not None and 'axi' not in already_processed:
            already_processed.append('axi')
            self.axi = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class vector_form


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'coupling'
        rootClass = coupling
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    #sys.stdout.write('<?xml version="1.0" ?>\n')
    #rootObj.export(sys.stdout, 0, name_=rootTag, 
    #    namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'coupling'
        rootClass = coupling
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="coupling",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'coupling'
        rootClass = coupling
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from couplings import *\n\n')
    sys.stdout.write('import couplings as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "constant",
    "constants",
    "coupling",
    "general",
    "matrix_form",
    "modules",
    "source",
    "target",
    "vector_form",
    "volume",
    "weakform_surface",
    "weakform_volume",
    "weakforms_surface",
    "weakforms_volume"
    ]
