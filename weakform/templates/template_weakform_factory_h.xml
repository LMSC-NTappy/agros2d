<?xml version="1.0"?>
<weakform_factory_h>
<head>// This file is part of Agros2D.
//
// Agros2D is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Agros2D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Agros2D.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
//
// hp-FEM group (http://hpfem.org/)
// University of Nevada, Reno (UNR) and University of West Bohemia, Pilsen
// Email: agros2d@googlegroups.com, home page: http://hpfem.org/agros2d/

#ifndef WEAKFORM_FACTORY_H
#define WEAKFORM_FACTORY_H

#include "util.h"
#include "hermes2d.h"

#include "scene.h"
#include "scenebasic.h"
#include "scenesolution.h"
#include "scenemarker.h"
#include "scenemarkerdialog.h"

#include "hermes2d/localpoint.h"
#include "hermes2d/volumeintegral.h"
#include "hermes2d/surfaceintegral.h"

#include &lt;rapidxml.cpp&gt;
#include &lt;rapidxml_utils.cpp&gt;

#include "hermes2d/marker.h"
#include "hermes2d/localpoint.h"
#include "hermes2d/weakform_parser.h"
</head>

<includes>#include "general_weakform.h"
</includes>

<condition_exact_solution>
        if ((problemId == "class_name")&amp;&amp;(i == row_index))
            return new namespace::FunctionName&lt;double&gt;(mesh, boundary);
</condition_exact_solution>

<condition_matrix_vol>
        if ((problemId == "class_name")&amp;&amp;(i == row_index)&amp;&amp;(j == column_index))
            return new namespace::FunctionName&lt;double&gt;(row_index, column_index, area, sym, material);
</condition_matrix_vol>

<condition_vector_vol>
        if ((problemId == "class_name")&amp;&amp;(i == row_index)&amp;&amp;(j == column_index))
            return new namespace::FunctionName&lt;double&gt;(row_index, column_index, area, material);
</condition_vector_vol>

<condition_matrix_surf>
        if ((problemId == "class_name")&amp;&amp;(i == row_index)&amp;&amp;(j == column_index)&amp;&amp;(boundary->getType() == "boundary_type"))
            return new namespace::FunctionName&lt;double&gt;(row_index, column_index, area, boundary);
</condition_matrix_surf>

<condition_vector_surf>
        if ((problemId == "class_name")&amp;&amp;(i == row_index)&amp;&amp;(j == column_index)&amp;&amp;(boundary->getType() == "boundary_type"))
            return new namespace::FunctionName&lt;double&gt;(row_index, column_index, area, boundary);
</condition_vector_surf>

<CustomEssentialFormSurf>
template &lt;typename Scalar&gt;
Hermes::Hermes2D::ExactSolutionScalar&lt;Scalar&gt; *factoryExactSolution(const std::string &amp;problemId, int i,Hermes::Hermes2D::Mesh *mesh, Boundary *boundary)
{
    //conditions 
    return NULL;
}
</CustomEssentialFormSurf>

<CustomMatrixFormVol>
template &lt;typename Scalar&gt;
Hermes::Hermes2D::MatrixFormVol&lt;Scalar&gt; *factoryMatrixFormVol(const std::string &amp;problemId, int i, int j,
                                                              const std::string &amp;area, Hermes::Hermes2D::SymFlag sym,
                                                              SceneMaterial *material)
{
    //conditions 
    return NULL;
}
</CustomMatrixFormVol>

<CustomVectorFormVol>
template &lt;typename Scalar&gt;
Hermes::Hermes2D::VectorFormVol&lt;Scalar&gt; *factoryVectorFormVol(const std::string &amp;problemId, int i, int j,
                                                              const std::string &amp;area, SceneMaterial *material)
{
    //conditions 
    return NULL;
}
</CustomVectorFormVol>

<CustomMatrixFormSurf>
template &lt;typename Scalar&gt;
Hermes::Hermes2D::MatrixFormSurf&lt;Scalar&gt; *factoryMatrixFormSurf(const std::string &amp;problemId, int i, int j,
                                                                const std::string &amp;area, SceneBoundary *boundary)
{
    //conditions 
    return NULL;
}
</CustomMatrixFormSurf>

<CustomVectorFormSurf>
template &lt;typename Scalar&gt;
Hermes::Hermes2D::VectorFormSurf&lt;Scalar&gt; *factoryVectorFormSurf(const std::string &amp;problemId, int i, int j,
                                                                const std::string &amp;area, SceneBoundary *boundary)
{
    //conditions 
    return NULL;
}
</CustomVectorFormSurf>
<footer>
#endif
</footer>
</weakform_factory_h>
