// This file is part of Agros2D.
//
// Agros2D is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Agros2D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Agros2D.  If not, see <http://www.gnu.org/licenses/>.
//
// hp-FEM group (http://hpfem.org/)
// University of Nevada, Reno (UNR) and University of West Bohemia, Pilsen
// Email: agros2d@googlegroups.com, home page: http://hpfem.org/agros2d/

#include "meshgenerator_gmsh.h"

#include "util/global.h"
#include "util/loops.h"

#include "scene.h"

#include "scenebasic.h"
#include "scenenode.h"
#include "sceneedge.h"
#include "scenelabel.h"

#include "sceneview_common.h"
#include "scenemarker.h"
#include "scenemarkerdialog.h"
#include "logview.h"

#include "hermes2d/module.h"

#include "hermes2d/field.h"
#include "hermes2d/problem.h"
#include "hermes2d/problem_config.h"

#include "gmsh/Gmsh.h"
#include "gmsh/Context.h"
#include "gmsh/GModel.h"
#include "gmsh/GVertex.h"
#include "gmsh/GEdge.h"
#include "gmsh/GEdgeLoop.h"
#include "gmsh/GmshDefines.h"
#include "gmsh/MElement.h"

MeshGeneratorGMSH::MeshGeneratorGMSH() : MeshGenerator()
{
}

bool MeshGeneratorGMSH::mesh()
{
    m_isError = !prepare();

    // create gmsh files
    if (writeToGmsh())
    {
        // convert gmsh mesh to hermes mesh
        if (!readGmshMeshFormat())
        {
            m_isError = true;
        }
    }
    else
    {
        m_isError = true;
    }

    return !m_isError;
}

bool MeshGeneratorGMSH::writeToGmsh()
{
    // basic check
    if (Agros2D::scene()->nodes->length() < 3)
    {
        Agros2D::log()->printError(tr("Mesh generator"), tr("Invalid number of nodes (%1 < 3)").arg(Agros2D::scene()->nodes->length()));
        return false;
    }
    if (Agros2D::scene()->edges->length() < 3)
    {
        Agros2D::log()->printError(tr("Mesh generator"), tr("Invalid number of edges (%1 < 3)").arg(Agros2D::scene()->edges->length()));
        return false;
    }

    // Initialization.
    GmshInitialize();
    // Options may be set this way.
    // Output information messages generated by the Gmsh library.
    GmshSetOption("General", "Terminal", 0.);
    // Be verbose (output debug messages).
    GmshSetOption("General", "Verbosity", 0.0);
    // Create GModel (the Gmsh library core) instance.

    GmshSetOption("Mesh", "Algorithm", (unsigned int) 8);
    GmshSetOption("Mesh", "SubdivisionAlgorithm", (unsigned int) 1);
    GmshSetOption("Mesh", "Algorithm", (unsigned int) 8);

    m = new GModel;
    m->setFactory("Gmsh");

    // mesh size
    RectPoint rect = Agros2D::scene()->boundingBox();
    double mesh_size = qMin(rect.width(), rect.height()) / 6.0;

    // nodes
    QList<GVertex *> vertices;
    for (int i = 0; i<Agros2D::scene()->nodes->length(); i++)
    {
        vertices.append(m->addVertex(Agros2D::scene()->nodes->at(i)->point().x,
                                     Agros2D::scene()->nodes->at(i)->point().y,
                                     0.0,
                                     mesh_size));
    }

    // edges
    QList<GEdge *> edges;
    edgesMap.clear();
    for (int i = 0; i<Agros2D::scene()->edges->length(); i++)
    {
        GEdge *edge = NULL;

        if (Agros2D::scene()->edges->at(i)->angle() == 0)
        {
            // straight line
            edge = m->addLine(vertices[Agros2D::scene()->nodes->items().indexOf(Agros2D::scene()->edges->at(i)->nodeStart())],
                    vertices[Agros2D::scene()->nodes->items().indexOf(Agros2D::scene()->edges->at(i)->nodeEnd())]);
        }
        else
        {
            // arc
            Point center = Agros2D::scene()->edges->at(i)->center();

            vertices.append(m->addVertex(center.x, center.y, 0.0, mesh_size));

            edge = m->addCircleArcCenter(vertices[Agros2D::scene()->nodes->items().indexOf(Agros2D::scene()->edges->at(i)->nodeStart())],
                    vertices.last(),
                    vertices[Agros2D::scene()->nodes->items().indexOf(Agros2D::scene()->edges->at(i)->nodeEnd())]);
        }

        edgesMap[Agros2D::scene()->edges->at(i)] = edge;
        edges.append(edge);
    }

    try
    {
        Agros2D::scene()->loopsInfo()->processLoops();
    }
    catch (AgrosMeshException& ame)
    {
        Agros2D::log()->printError(tr("Mesh generator"), ame.toString());
        std::cout << "Missing Label";
        return false;
    }

    QList<std::vector<GEdge *> > edgesLoop;
    for(int i = 0; i < Agros2D::scene()->loopsInfo()->loops().size(); i++)
    {
        edgesLoop.append(std::vector<GEdge *>());
        qDebug() << "loop" << i;

        if (!Agros2D::scene()->loopsInfo()->outsideLoops().contains(i))
        {            
            for(int j = 0; j < Agros2D::scene()->loopsInfo()->loops().at(i).size(); j++)
            {
                GEdge *edge = edges[Agros2D::scene()->loopsInfo()->loops().at(i)[j].edge];

                // if (Agros2D::scene()->loopsInfo()->loops().at(i)[j].reverse)
                    // edge->reverse();

                edgesLoop.last().push_back(edge);
                qDebug() << "edge" << Agros2D::scene()->loopsInfo()->loops().at(i)[j].edge << " reverse " << Agros2D::scene()->loopsInfo()->loops().at(i)[j].reverse;
            }
        }
    }

    qDebug() << "edges loop size" << edgesLoop.size();
    for (int i = 0; i < Agros2D::scene()->labels->count(); i++)
    {
        SceneLabel* label = Agros2D::scene()->labels->at(i);
        if (!label->isHole())
        {
            qDebug() << "label PRE" << i;
            std::vector<std::vector<GEdge *> > loops;
            for (int j = 0; j < Agros2D::scene()->loopsInfo()->labelLoops()[label].count(); j++)
            {
                qDebug() << Agros2D::scene()->loopsInfo()->labelLoops()[label][j];
                loops.push_back(edgesLoop[Agros2D::scene()->loopsInfo()->labelLoops()[label][j]]);
            }
            GFace *face = m->addPlanarFace(loops);

            face->setMeshingAlgo(ALGO_2D_AUTO);

            facesMap[label] = face;
        }
    }

    // create mesh
    m->mesh(2);


    //    // quad mesh
    //    if (Agros2D::problem()->config()->meshType() == MeshType_GMSH_Quad ||
    //            Agros2D::problem()->config()->meshType() == MeshType_GMSH_QuadDelaunay_Experimental)
    //    {
    //        outLoops.append(QString("Recombine Surface {"));
    //        for(int i = 0; i <  surfaces.count(); i++)
    //        {
    //            outLoops.append(QString("%1").arg(surfaces.at(i)));
    //            if(i < surfaces.count() - 1)
    //                outLoops.append(",");
    //        }
    //        outLoops.append(QString("};\n"));
    //    }

    //    // Mesh.Algorithm - 1=MeshAdapt, 2=Automatic, 5=Delaunay, 6=Frontal, 7=bamg, 8=delquad
    //    QString outCommands;
    //    if (Agros2D::problem()->config()->meshType() == MeshType_GMSH_Triangle)
    //    {
    //        outCommands.append(QString("Mesh.Algorithm = 2;\n"));
    //    }
    //    else if (Agros2D::problem()->config()->meshType() == MeshType_GMSH_Quad)
    //    {
    //        outCommands.append(QString("Mesh.Algorithm = 2;\n"));
    //        outCommands.append(QString("Mesh.SubdivisionAlgorithm = 1;\n"));
    //    }
    //    else if (Agros2D::problem()->config()->meshType() == MeshType_GMSH_QuadDelaunay_Experimental)
    //    {
    //        outCommands.append(QString("Mesh.Algorithm = 8;\n"));
    //        outCommands.append(QString("Mesh.SubdivisionAlgorithm = 1;\n"));
    //    }

    m->writeGEO((tempProblemFileName() + ".geo").toStdString());
    m->writeMSH((tempProblemFileName() + ".msh").toStdString());

    return true;
}

bool MeshGeneratorGMSH::readGmshMeshFormat()
{
    nodeList.clear();
    edgeList.clear();
    elementList.clear();

    m->indexMeshVertices(true, 0, false);

    // nodes
    for (int i = 0; i < m->getNumMeshVertices(); ++i)
    {
        MVertex *mv = m->getMeshVertexByTag(i + 1);
        if (mv)
            nodeList.append(Point(mv->x(), mv->y()));
    }

    QMap<SceneEdge *, GEdge *>::const_iterator iEdge = edgesMap.constBegin();
    while (iEdge != edgesMap.constEnd())
    {
        GEdge *edge = iEdge.value();

        for (int i = 0; i < edge->getNumMeshElements(); ++i)
        {
            MElement *me = edge->getMeshElement(i);

            // edge
            if (me->getType() == TYPE_LIN)
            {
                edgeList.append(MeshEdge(me->getVertex(0)->getIndex() - 1,
                                         me->getVertex(1)->getIndex() - 1,
                                         Agros2D::scene()->edges->items().indexOf(iEdge.key())));
            }
        }

        ++iEdge;
    }

    QMap<SceneLabel *, GFace *>::const_iterator iFace = facesMap.constBegin();
    while (iFace != facesMap.constEnd())
    {
        GFace *face = iFace.value();

        for (int i = 0; i < face->getNumMeshElements(); ++i)
        {
            MElement *me = face->getMeshElement(i);

            // triangle
            if (me->getType() == TYPE_TRI)
            {
                elementList.append(MeshElement(me->getVertex(0)->getIndex() - 1,
                                               me->getVertex(1)->getIndex() - 1,
                                               me->getVertex(2)->getIndex() - 1,
                                               Agros2D::scene()->labels->items().indexOf(iFace.key())));
            }

            // quad
            if (me->getType() == TYPE_QUA)
            {
                elementList.append(MeshElement(me->getVertex(0)->getIndex() - 1,
                                               me->getVertex(1)->getIndex() - 1,
                                               me->getVertex(2)->getIndex() - 1,
                                               me->getVertex(3)->getIndex() - 1,
                                               Agros2D::scene()->labels->items().indexOf(iFace.key())));
            }
        }

        ++iFace;
    }

    // Finalization.
    delete m;
    edgesMap.clear();
    facesMap.clear();

    GmshFinalize();

    writeToHermes();

    nodeList.clear();
    edgeList.clear();
    elementList.clear();

    return true;
}

